// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: overlay.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "overlay.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protocol {

namespace {

const ::google::protobuf::Descriptor* Hello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hello_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelloResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Peer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Peer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Peers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Peers_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLedgers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLedgers_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ledgers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ledgers_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Ledgers_SyncCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DontHave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DontHave_reflection_ = NULL;
const ::google::protobuf::Descriptor* LedgerUpgradeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LedgerUpgradeNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntryList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChainHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChainHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChainStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChainStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChainPeerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChainPeerMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChainSubscribeTx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChainSubscribeTx_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChainResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChainResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChainTxStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChainTxStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChainTxStatus_TxStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MessageChannelQueryDeposit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageChannelQueryDeposit_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageChannelHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageChannelHello_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageChannelHelloResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageChannelHelloResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageChannelProposer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageChannelProposer_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageChannelCreateChildChain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageChannelCreateChildChain_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageChannelChildGenesesRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageChannelChildGenesesRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageChannelChildGenesesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageChannelChildGenesesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageChannelQueryHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageChannelQueryHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* MerkelProof_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MerkelProof_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageChannelDeposit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageChannelDeposit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OVERLAY_MESSAGE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ChainMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MESSAGE_CHANNEL_NODE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MESSAGE_CHANNEL_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_overlay_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_overlay_2eproto() {
  protobuf_AddDesc_overlay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "overlay.proto");
  GOOGLE_CHECK(file != NULL);
  Hello_descriptor_ = file->message_type(0);
  static const int Hello_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, ledger_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, overlay_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, bumo_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, listening_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, node_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, node_rand_),
  };
  Hello_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Hello_descriptor_,
      Hello::default_instance_,
      Hello_offsets_,
      -1,
      -1,
      -1,
      sizeof(Hello),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hello, _is_default_instance_));
  HelloResponse_descriptor_ = file->message_type(1);
  static const int HelloResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloResponse, error_desc_),
  };
  HelloResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HelloResponse_descriptor_,
      HelloResponse::default_instance_,
      HelloResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(HelloResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloResponse, _is_default_instance_));
  Peer_descriptor_ = file->message_type(2);
  static const int Peer_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, num_failures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, next_attempt_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, active_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, connection_id_),
  };
  Peer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Peer_descriptor_,
      Peer::default_instance_,
      Peer_offsets_,
      -1,
      -1,
      -1,
      sizeof(Peer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peer, _is_default_instance_));
  Peers_descriptor_ = file->message_type(3);
  static const int Peers_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peers, peers_),
  };
  Peers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Peers_descriptor_,
      Peers::default_instance_,
      Peers_offsets_,
      -1,
      -1,
      -1,
      sizeof(Peers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peers, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Peers, _is_default_instance_));
  GetLedgers_descriptor_ = file->message_type(4);
  static const int GetLedgers_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedgers, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedgers, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedgers, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedgers, chain_id_),
  };
  GetLedgers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GetLedgers_descriptor_,
      GetLedgers::default_instance_,
      GetLedgers_offsets_,
      -1,
      -1,
      -1,
      sizeof(GetLedgers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedgers, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLedgers, _is_default_instance_));
  Ledgers_descriptor_ = file->message_type(5);
  static const int Ledgers_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledgers, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledgers, sync_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledgers, max_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledgers, proof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledgers, chain_id_),
  };
  Ledgers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Ledgers_descriptor_,
      Ledgers::default_instance_,
      Ledgers_offsets_,
      -1,
      -1,
      -1,
      sizeof(Ledgers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledgers, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ledgers, _is_default_instance_));
  Ledgers_SyncCode_descriptor_ = Ledgers_descriptor_->enum_type(0);
  DontHave_descriptor_ = file->message_type(6);
  static const int DontHave_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontHave, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontHave, hash_),
  };
  DontHave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DontHave_descriptor_,
      DontHave::default_instance_,
      DontHave_offsets_,
      -1,
      -1,
      -1,
      sizeof(DontHave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontHave, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DontHave, _is_default_instance_));
  LedgerUpgradeNotify_descriptor_ = file->message_type(7);
  static const int LedgerUpgradeNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerUpgradeNotify, nonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerUpgradeNotify, upgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerUpgradeNotify, signature_),
  };
  LedgerUpgradeNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LedgerUpgradeNotify_descriptor_,
      LedgerUpgradeNotify::default_instance_,
      LedgerUpgradeNotify_offsets_,
      -1,
      -1,
      -1,
      sizeof(LedgerUpgradeNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerUpgradeNotify, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LedgerUpgradeNotify, _is_default_instance_));
  EntryList_descriptor_ = file->message_type(8);
  static const int EntryList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryList, entry_),
  };
  EntryList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntryList_descriptor_,
      EntryList::default_instance_,
      EntryList_offsets_,
      -1,
      -1,
      -1,
      sizeof(EntryList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntryList, _is_default_instance_));
  ChainHello_descriptor_ = file->message_type(9);
  static const int ChainHello_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainHello, api_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainHello, timestamp_),
  };
  ChainHello_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChainHello_descriptor_,
      ChainHello::default_instance_,
      ChainHello_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChainHello),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainHello, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainHello, _is_default_instance_));
  ChainStatus_descriptor_ = file->message_type(10);
  static const int ChainStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, self_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, ledger_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, monitor_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, bumo_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, timestamp_),
  };
  ChainStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChainStatus_descriptor_,
      ChainStatus::default_instance_,
      ChainStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChainStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainStatus, _is_default_instance_));
  ChainPeerMessage_descriptor_ = file->message_type(11);
  static const int ChainPeerMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerMessage, src_peer_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerMessage, des_peer_addrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerMessage, data_),
  };
  ChainPeerMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChainPeerMessage_descriptor_,
      ChainPeerMessage::default_instance_,
      ChainPeerMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChainPeerMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainPeerMessage, _is_default_instance_));
  ChainSubscribeTx_descriptor_ = file->message_type(12);
  static const int ChainSubscribeTx_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainSubscribeTx, address_),
  };
  ChainSubscribeTx_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChainSubscribeTx_descriptor_,
      ChainSubscribeTx::default_instance_,
      ChainSubscribeTx_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChainSubscribeTx),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainSubscribeTx, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainSubscribeTx, _is_default_instance_));
  ChainResponse_descriptor_ = file->message_type(13);
  static const int ChainResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainResponse, error_desc_),
  };
  ChainResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChainResponse_descriptor_,
      ChainResponse::default_instance_,
      ChainResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChainResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainResponse, _is_default_instance_));
  ChainTxStatus_descriptor_ = file->message_type(14);
  static const int ChainTxStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, tx_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, source_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, source_account_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, ledger_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, new_account_seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, error_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, timestamp_),
  };
  ChainTxStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChainTxStatus_descriptor_,
      ChainTxStatus::default_instance_,
      ChainTxStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChainTxStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChainTxStatus, _is_default_instance_));
  ChainTxStatus_TxStatus_descriptor_ = ChainTxStatus_descriptor_->enum_type(0);
  MessageChannelQueryDeposit_descriptor_ = file->message_type(15);
  static const int MessageChannelQueryDeposit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelQueryDeposit, chain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelQueryDeposit, seq_),
  };
  MessageChannelQueryDeposit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageChannelQueryDeposit_descriptor_,
      MessageChannelQueryDeposit::default_instance_,
      MessageChannelQueryDeposit_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageChannelQueryDeposit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelQueryDeposit, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelQueryDeposit, _is_default_instance_));
  MessageChannelHello_descriptor_ = file->message_type(16);
  static const int MessageChannelHello_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelHello, network_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelHello, node_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelHello, chain_id_),
  };
  MessageChannelHello_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageChannelHello_descriptor_,
      MessageChannelHello::default_instance_,
      MessageChannelHello_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageChannelHello),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelHello, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelHello, _is_default_instance_));
  MessageChannelHelloResponse_descriptor_ = file->message_type(17);
  static const int MessageChannelHelloResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelHelloResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelHelloResponse, error_desc_),
  };
  MessageChannelHelloResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageChannelHelloResponse_descriptor_,
      MessageChannelHelloResponse::default_instance_,
      MessageChannelHelloResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageChannelHelloResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelHelloResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelHelloResponse, _is_default_instance_));
  MessageChannel_descriptor_ = file->message_type(18);
  static const int MessageChannel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannel, target_chain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannel, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannel, msg_data_),
  };
  MessageChannel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageChannel_descriptor_,
      MessageChannel::default_instance_,
      MessageChannel_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageChannel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannel, _is_default_instance_));
  MessageChannelResponse_descriptor_ = file->message_type(19);
  static const int MessageChannelResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelResponse, error_desc_),
  };
  MessageChannelResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageChannelResponse_descriptor_,
      MessageChannelResponse::default_instance_,
      MessageChannelResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageChannelResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelResponse, _is_default_instance_));
  MessageChannelProposer_descriptor_ = file->message_type(20);
  static const int MessageChannelProposer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelProposer, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelProposer, proposer_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelProposer, proposer_signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelProposer, header_hash_),
  };
  MessageChannelProposer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageChannelProposer_descriptor_,
      MessageChannelProposer::default_instance_,
      MessageChannelProposer_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageChannelProposer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelProposer, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelProposer, _is_default_instance_));
  BlockReward_descriptor_ = file->message_type(21);
  static const int BlockReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReward, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReward, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReward, ratio_),
  };
  BlockReward_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlockReward_descriptor_,
      BlockReward::default_instance_,
      BlockReward_offsets_,
      -1,
      -1,
      -1,
      sizeof(BlockReward),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReward, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockReward, _is_default_instance_));
  MessageChannelCreateChildChain_descriptor_ = file->message_type(22);
  static const int MessageChannelCreateChildChain_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelCreateChildChain, genesis_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelCreateChildChain, slogan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelCreateChildChain, fee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelCreateChildChain, reserve_validator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelCreateChildChain, chain_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelCreateChildChain, chain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelCreateChildChain, genesis_token_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelCreateChildChain, block_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelCreateChildChain, cost_),
  };
  MessageChannelCreateChildChain_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageChannelCreateChildChain_descriptor_,
      MessageChannelCreateChildChain::default_instance_,
      MessageChannelCreateChildChain_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageChannelCreateChildChain),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelCreateChildChain, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelCreateChildChain, _is_default_instance_));
  MessageChannelChildGenesesRequest_descriptor_ = file->message_type(23);
  static const int MessageChannelChildGenesesRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelChildGenesesRequest, chain_id_),
  };
  MessageChannelChildGenesesRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageChannelChildGenesesRequest_descriptor_,
      MessageChannelChildGenesesRequest::default_instance_,
      MessageChannelChildGenesesRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageChannelChildGenesesRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelChildGenesesRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelChildGenesesRequest, _is_default_instance_));
  MessageChannelChildGenesesResponse_descriptor_ = file->message_type(24);
  static const int MessageChannelChildGenesesResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelChildGenesesResponse, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelChildGenesesResponse, error_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelChildGenesesResponse, create_child_chain_),
  };
  MessageChannelChildGenesesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageChannelChildGenesesResponse_descriptor_,
      MessageChannelChildGenesesResponse::default_instance_,
      MessageChannelChildGenesesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageChannelChildGenesesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelChildGenesesResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelChildGenesesResponse, _is_default_instance_));
  MessageChannelQueryHead_descriptor_ = file->message_type(25);
  static const int MessageChannelQueryHead_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelQueryHead, ledger_seq_),
  };
  MessageChannelQueryHead_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageChannelQueryHead_descriptor_,
      MessageChannelQueryHead::default_instance_,
      MessageChannelQueryHead_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageChannelQueryHead),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelQueryHead, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelQueryHead, _is_default_instance_));
  MerkelProof_descriptor_ = file->message_type(26);
  static const int MerkelProof_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerkelProof, merkel_root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerkelProof, merkel_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerkelProof, transaction_),
  };
  MerkelProof_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MerkelProof_descriptor_,
      MerkelProof::default_instance_,
      MerkelProof_offsets_,
      -1,
      -1,
      -1,
      sizeof(MerkelProof),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerkelProof, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MerkelProof, _is_default_instance_));
  MessageChannelDeposit_descriptor_ = file->message_type(27);
  static const int MessageChannelDeposit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelDeposit, chain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelDeposit, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelDeposit, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelDeposit, block_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelDeposit, source_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelDeposit, address_),
  };
  MessageChannelDeposit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageChannelDeposit_descriptor_,
      MessageChannelDeposit::default_instance_,
      MessageChannelDeposit_offsets_,
      -1,
      -1,
      -1,
      sizeof(MessageChannelDeposit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelDeposit, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageChannelDeposit, _is_default_instance_));
  OVERLAY_MESSAGE_TYPE_descriptor_ = file->enum_type(0);
  ChainMessageType_descriptor_ = file->enum_type(1);
  MESSAGE_CHANNEL_NODE_TYPE_descriptor_ = file->enum_type(2);
  MESSAGE_CHANNEL_TYPE_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_overlay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Hello_descriptor_, &Hello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HelloResponse_descriptor_, &HelloResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Peer_descriptor_, &Peer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Peers_descriptor_, &Peers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GetLedgers_descriptor_, &GetLedgers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Ledgers_descriptor_, &Ledgers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DontHave_descriptor_, &DontHave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LedgerUpgradeNotify_descriptor_, &LedgerUpgradeNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntryList_descriptor_, &EntryList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChainHello_descriptor_, &ChainHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChainStatus_descriptor_, &ChainStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChainPeerMessage_descriptor_, &ChainPeerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChainSubscribeTx_descriptor_, &ChainSubscribeTx::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChainResponse_descriptor_, &ChainResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChainTxStatus_descriptor_, &ChainTxStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageChannelQueryDeposit_descriptor_, &MessageChannelQueryDeposit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageChannelHello_descriptor_, &MessageChannelHello::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageChannelHelloResponse_descriptor_, &MessageChannelHelloResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageChannel_descriptor_, &MessageChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageChannelResponse_descriptor_, &MessageChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageChannelProposer_descriptor_, &MessageChannelProposer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlockReward_descriptor_, &BlockReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageChannelCreateChildChain_descriptor_, &MessageChannelCreateChildChain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageChannelChildGenesesRequest_descriptor_, &MessageChannelChildGenesesRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageChannelChildGenesesResponse_descriptor_, &MessageChannelChildGenesesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageChannelQueryHead_descriptor_, &MessageChannelQueryHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MerkelProof_descriptor_, &MerkelProof::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageChannelDeposit_descriptor_, &MessageChannelDeposit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_overlay_2eproto() {
  delete Hello::default_instance_;
  delete Hello_reflection_;
  delete HelloResponse::default_instance_;
  delete HelloResponse_reflection_;
  delete Peer::default_instance_;
  delete Peer_reflection_;
  delete Peers::default_instance_;
  delete Peers_reflection_;
  delete GetLedgers::default_instance_;
  delete GetLedgers_reflection_;
  delete Ledgers::default_instance_;
  delete Ledgers_reflection_;
  delete DontHave::default_instance_;
  delete DontHave_reflection_;
  delete LedgerUpgradeNotify::default_instance_;
  delete LedgerUpgradeNotify_reflection_;
  delete EntryList::default_instance_;
  delete EntryList_reflection_;
  delete ChainHello::default_instance_;
  delete ChainHello_reflection_;
  delete ChainStatus::default_instance_;
  delete ChainStatus_reflection_;
  delete ChainPeerMessage::default_instance_;
  delete ChainPeerMessage_reflection_;
  delete ChainSubscribeTx::default_instance_;
  delete ChainSubscribeTx_reflection_;
  delete ChainResponse::default_instance_;
  delete ChainResponse_reflection_;
  delete ChainTxStatus::default_instance_;
  delete ChainTxStatus_reflection_;
  delete MessageChannelQueryDeposit::default_instance_;
  delete MessageChannelQueryDeposit_reflection_;
  delete MessageChannelHello::default_instance_;
  delete MessageChannelHello_reflection_;
  delete MessageChannelHelloResponse::default_instance_;
  delete MessageChannelHelloResponse_reflection_;
  delete MessageChannel::default_instance_;
  delete MessageChannel_reflection_;
  delete MessageChannelResponse::default_instance_;
  delete MessageChannelResponse_reflection_;
  delete MessageChannelProposer::default_instance_;
  delete MessageChannelProposer_reflection_;
  delete BlockReward::default_instance_;
  delete BlockReward_reflection_;
  delete MessageChannelCreateChildChain::default_instance_;
  delete MessageChannelCreateChildChain_reflection_;
  delete MessageChannelChildGenesesRequest::default_instance_;
  delete MessageChannelChildGenesesRequest_reflection_;
  delete MessageChannelChildGenesesResponse::default_instance_;
  delete MessageChannelChildGenesesResponse_reflection_;
  delete MessageChannelQueryHead::default_instance_;
  delete MessageChannelQueryHead_reflection_;
  delete MerkelProof::default_instance_;
  delete MerkelProof_reflection_;
  delete MessageChannelDeposit::default_instance_;
  delete MessageChannelDeposit_reflection_;
}

void protobuf_AddDesc_overlay_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_overlay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protocol::protobuf_AddDesc_common_2eproto();
  ::protocol::protobuf_AddDesc_chain_2eproto();
  ::protocol::protobuf_AddDesc_consensus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\roverlay.proto\022\010protocol\032\014common.proto\032"
    "\013chain.proto\032\017consensus.proto\"\243\001\n\005Hello\022"
    "\022\n\nnetwork_id\030\001 \001(\003\022\026\n\016ledger_version\030\002 "
    "\001(\003\022\027\n\017overlay_version\030\003 \001(\003\022\024\n\014bumo_ver"
    "sion\030\004 \001(\t\022\026\n\016listening_port\030\005 \001(\003\022\024\n\014no"
    "de_address\030\006 \001(\t\022\021\n\tnode_rand\030\007 \001(\t\"L\n\rH"
    "elloResponse\022\'\n\nerror_code\030\001 \001(\0162\023.proto"
    "col.ERRORCODE\022\022\n\nerror_desc\030\002 \001(\t\"}\n\004Pee"
    "r\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\003\022\024\n\014num_failu"
    "res\030\003 \001(\003\022\031\n\021next_attempt_time\030\004 \001(\003\022\023\n\013"
    "active_time\030\005 \001(\003\022\025\n\rconnection_id\030\006 \001(\003"
    "\"&\n\005Peers\022\035\n\005peers\030\001 \003(\0132\016.protocol.Peer"
    "\"M\n\nGetLedgers\022\r\n\005begin\030\001 \001(\003\022\013\n\003end\030\002 \001"
    "(\003\022\021\n\ttimestamp\030\003 \001(\003\022\020\n\010chain_id\030\004 \001(\003\""
    "\361\001\n\007Ledgers\022(\n\006values\030\001 \003(\0132\030.protocol.C"
    "onsensusValue\022-\n\tsync_code\030\002 \001(\0162\032.proto"
    "col.Ledgers.SyncCode\022\017\n\007max_seq\030\003 \001(\003\022\r\n"
    "\005proof\030\004 \001(\014\022\020\n\010chain_id\030\005 \001(\003\"[\n\010SyncCo"
    "de\022\006\n\002OK\020\000\022\017\n\013OUT_OF_SYNC\020\001\022\022\n\016OUT_OF_LE"
    "DGERS\020\002\022\010\n\004BUSY\020\003\022\n\n\006REFUSE\020\004\022\014\n\010INTERNA"
    "L\020\005\"&\n\010DontHave\022\014\n\004type\030\001 \001(\003\022\014\n\004hash\030\002 "
    "\001(\014\"v\n\023LedgerUpgradeNotify\022\r\n\005nonce\030\001 \001("
    "\003\022(\n\007upgrade\030\002 \001(\0132\027.protocol.LedgerUpgr"
    "ade\022&\n\tsignature\030\003 \001(\0132\023.protocol.Signat"
    "ure\"\032\n\tEntryList\022\r\n\005entry\030\001 \003(\014\"M\n\nChain"
    "Hello\022,\n\010api_list\030\001 \003(\0162\032.protocol.Chain"
    "MessageType\022\021\n\ttimestamp\030\002 \001(\003\"z\n\013ChainS"
    "tatus\022\021\n\tself_addr\030\001 \001(\t\022\026\n\016ledger_versi"
    "on\030\002 \001(\003\022\027\n\017monitor_version\030\003 \001(\003\022\024\n\014bum"
    "o_version\030\004 \001(\t\022\021\n\ttimestamp\030\005 \001(\003\"O\n\020Ch"
    "ainPeerMessage\022\025\n\rsrc_peer_addr\030\001 \001(\t\022\026\n"
    "\016des_peer_addrs\030\002 \003(\t\022\014\n\004data\030\003 \001(\014\"#\n\020C"
    "hainSubscribeTx\022\017\n\007address\030\001 \003(\t\"7\n\rChai"
    "nResponse\022\022\n\nerror_code\030\001 \001(\005\022\022\n\nerror_d"
    "esc\030\002 \001(\t\"\325\002\n\rChainTxStatus\0220\n\006status\030\001 "
    "\001(\0162 .protocol.ChainTxStatus.TxStatus\022\017\n"
    "\007tx_hash\030\002 \001(\t\022\026\n\016source_address\030\003 \001(\t\022\032"
    "\n\022source_account_seq\030\004 \001(\003\022\022\n\nledger_seq"
    "\030\005 \001(\003\022\027\n\017new_account_seq\030\006 \001(\003\022\'\n\nerror"
    "_code\030\007 \001(\0162\023.protocol.ERRORCODE\022\022\n\nerro"
    "r_desc\030\010 \001(\t\022\021\n\ttimestamp\030\t \001(\003\"P\n\010TxSta"
    "tus\022\r\n\tUNDEFINED\020\000\022\r\n\tCONFIRMED\020\001\022\013\n\007PEN"
    "DING\020\002\022\014\n\010COMPLETE\020\003\022\013\n\007FAILURE\020\004\";\n\032Mes"
    "sageChannelQueryDeposit\022\020\n\010chain_id\030\001 \001("
    "\003\022\013\n\003seq\030\002 \001(\003\"Q\n\023MessageChannelHello\022\022\n"
    "\nnetwork_id\030\001 \001(\003\022\024\n\014node_address\030\003 \001(\t\022"
    "\020\n\010chain_id\030\004 \001(\003\"Z\n\033MessageChannelHello"
    "Response\022\'\n\nerror_code\030\001 \001(\0162\023.protocol."
    "ERRORCODE\022\022\n\nerror_desc\030\002 \001(\t\"m\n\016Message"
    "Channel\022\027\n\017target_chain_id\030\001 \001(\003\0220\n\010msg_"
    "type\030\002 \001(\0162\036.protocol.MESSAGE_CHANNEL_TY"
    "PE\022\020\n\010msg_data\030\003 \001(\014\"U\n\026MessageChannelRe"
    "sponse\022\'\n\nerror_code\030\001 \001(\0162\023.protocol.ER"
    "RORCODE\022\022\n\nerror_desc\030\002 \001(\t\"\213\001\n\026MessageC"
    "hannelProposer\022&\n\006header\030\001 \001(\0132\026.protoco"
    "l.LedgerHeader\022\030\n\020proposer_address\030\002 \001(\t"
    "\022\032\n\022proposer_signature\030\003 \001(\014\022\023\n\013header_h"
    "ash\030\004 \001(\014\"<\n\013BlockReward\022\016\n\006amount\030\001 \001(\003"
    "\022\016\n\006period\030\002 \001(\003\022\r\n\005ratio\030\003 \001(\001\"\205\002\n\036Mess"
    "ageChannelCreateChildChain\022\027\n\017genesis_ac"
    "count\030\001 \001(\t\022\016\n\006slogan\030\002 \001(\t\022 \n\003fee\030\003 \001(\013"
    "2\023.protocol.FeeConfig\022\031\n\021reserve_validat"
    "or\030\004 \003(\t\022\022\n\nchain_name\030\005 \001(\t\022\020\n\010chain_id"
    "\030\006 \001(\003\022\034\n\024genesis_token_amount\030\007 \001(\t\022+\n\014"
    "block_reward\030\010 \001(\0132\025.protocol.BlockRewar"
    "d\022\014\n\004cost\030\t \001(\003\"5\n!MessageChannelChildGe"
    "nesesRequest\022\020\n\010chain_id\030\001 \001(\003\"\247\001\n\"Messa"
    "geChannelChildGenesesResponse\022\'\n\nerror_c"
    "ode\030\001 \001(\0162\023.protocol.ERRORCODE\022\022\n\nerror_"
    "desc\030\002 \001(\t\022D\n\022create_child_chain\030\003 \001(\0132("
    ".protocol.MessageChannelCreateChildChain"
    "\"-\n\027MessageChannelQueryHead\022\022\n\nledger_se"
    "q\030\001 \001(\003\"c\n\013MerkelProof\022\023\n\013merkel_root\030\001 "
    "\001(\014\022\023\n\013merkel_path\030\002 \001(\014\022*\n\013transaction\030"
    "\003 \001(\0132\025.protocol.Transaction\"\205\001\n\025Message"
    "ChannelDeposit\022\020\n\010chain_id\030\001 \001(\003\022\016\n\006amou"
    "nt\030\002 \001(\003\022\013\n\003seq\030\003 \001(\003\022\024\n\014block_number\030\004 "
    "\001(\003\022\026\n\016source_address\030\005 \001(\t\022\017\n\007address\030\006"
    " \001(\t*\203\002\n\024OVERLAY_MESSAGE_TYPE\022\030\n\024OVERLAY"
    "_MSGTYPE_NONE\020\000\022\030\n\024OVERLAY_MSGTYPE_PING\020"
    "\001\022\031\n\025OVERLAY_MSGTYPE_HELLO\020\002\022\031\n\025OVERLAY_"
    "MSGTYPE_PEERS\020\003\022\037\n\033OVERLAY_MSGTYPE_TRANS"
    "ACTION\020\004\022\033\n\027OVERLAY_MSGTYPE_LEDGERS\020\005\022\030\n"
    "\024OVERLAY_MSGTYPE_PBFT\020\006\022)\n%OVERLAY_MSGTY"
    "PE_LEDGER_UPGRADE_NOTIFY\020\007*\372\001\n\020ChainMess"
    "ageType\022\023\n\017CHAIN_TYPE_NONE\020\000\022\017\n\013CHAIN_HE"
    "LLO\020\n\022\023\n\017CHAIN_TX_STATUS\020\013\022\025\n\021CHAIN_PEER"
    "_ONLINE\020\014\022\026\n\022CHAIN_PEER_OFFLINE\020\r\022\026\n\022CHA"
    "IN_PEER_MESSAGE\020\016\022\033\n\027CHAIN_SUBMITTRANSAC"
    "TION\020\017\022\027\n\023CHAIN_LEDGER_HEADER\020\020\022\026\n\022CHAIN"
    "_SUBSCRIBE_TX\020\021\022\026\n\022CHAIN_TX_ENV_STORE\020\022*"
    "\201\001\n\031MESSAGE_CHANNEL_NODE_TYPE\022\"\n\036MESSAGE"
    "_CHANNEL_NODE_TYPE_NONE\020\000\022 \n\034MESSAGE_CHA"
    "NNEL_NODE_PACKAGE\020\036\022\036\n\032MESSAGE_CHANNEL_N"
    "ODE_HELLO\020\037*\205\004\n\024MESSAGE_CHANNEL_TYPE\022\035\n\031"
    "MESSAGE_CHANNEL_TYPE_NONE\020\000\022&\n\"MESSAGE_C"
    "HANNEL_CREATE_CHILD_CHAIN\020\001\022\034\n\030MESSAGE_C"
    "HANNEL_MAIN_MIX\020\002\022\035\n\031MESSAGE_CHANNEL_CHI"
    "LD_MIX\020\003\022\033\n\027MESSAGE_CHANNEL_DEPOSIT\020\004\022\036\n"
    "\032MESSAGE_CHANNEL_WITHDRAWAL\020\005\022#\n\037MESSAGE"
    "_CHANNEL_FAST_WITHDRAWAL\020\006\022\037\n\033MESSAGE_CH"
    "ANNEL_SUBMIT_HEAD\020\007\022(\n$MESSAGE_CHANNEL_C"
    "HALLENGE_WITHDRAWAL\020\010\022\"\n\036MESSAGE_CHANNEL"
    "_CHALLENGE_HEAD\020\t\022)\n%MESSAGE_CHANNEL_CHI"
    "LD_GENESES_REQUEST\020\n\022*\n&MESSAGE_CHANNEL_"
    "CHILD_GENESES_RESPONSE\020\013\022\036\n\032MESSAGE_CHAN"
    "NEL_QUERY_HEAD\020\014\022!\n\035MESSAGE_CHANNEL_QUER"
    "Y_DEPOSIT\020\rB\"\n io.bumo.sdk.core.extend.p"
    "rotobufb\006proto3", 4335);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "overlay.proto", &protobuf_RegisterTypes);
  Hello::default_instance_ = new Hello();
  HelloResponse::default_instance_ = new HelloResponse();
  Peer::default_instance_ = new Peer();
  Peers::default_instance_ = new Peers();
  GetLedgers::default_instance_ = new GetLedgers();
  Ledgers::default_instance_ = new Ledgers();
  DontHave::default_instance_ = new DontHave();
  LedgerUpgradeNotify::default_instance_ = new LedgerUpgradeNotify();
  EntryList::default_instance_ = new EntryList();
  ChainHello::default_instance_ = new ChainHello();
  ChainStatus::default_instance_ = new ChainStatus();
  ChainPeerMessage::default_instance_ = new ChainPeerMessage();
  ChainSubscribeTx::default_instance_ = new ChainSubscribeTx();
  ChainResponse::default_instance_ = new ChainResponse();
  ChainTxStatus::default_instance_ = new ChainTxStatus();
  MessageChannelQueryDeposit::default_instance_ = new MessageChannelQueryDeposit();
  MessageChannelHello::default_instance_ = new MessageChannelHello();
  MessageChannelHelloResponse::default_instance_ = new MessageChannelHelloResponse();
  MessageChannel::default_instance_ = new MessageChannel();
  MessageChannelResponse::default_instance_ = new MessageChannelResponse();
  MessageChannelProposer::default_instance_ = new MessageChannelProposer();
  BlockReward::default_instance_ = new BlockReward();
  MessageChannelCreateChildChain::default_instance_ = new MessageChannelCreateChildChain();
  MessageChannelChildGenesesRequest::default_instance_ = new MessageChannelChildGenesesRequest();
  MessageChannelChildGenesesResponse::default_instance_ = new MessageChannelChildGenesesResponse();
  MessageChannelQueryHead::default_instance_ = new MessageChannelQueryHead();
  MerkelProof::default_instance_ = new MerkelProof();
  MessageChannelDeposit::default_instance_ = new MessageChannelDeposit();
  Hello::default_instance_->InitAsDefaultInstance();
  HelloResponse::default_instance_->InitAsDefaultInstance();
  Peer::default_instance_->InitAsDefaultInstance();
  Peers::default_instance_->InitAsDefaultInstance();
  GetLedgers::default_instance_->InitAsDefaultInstance();
  Ledgers::default_instance_->InitAsDefaultInstance();
  DontHave::default_instance_->InitAsDefaultInstance();
  LedgerUpgradeNotify::default_instance_->InitAsDefaultInstance();
  EntryList::default_instance_->InitAsDefaultInstance();
  ChainHello::default_instance_->InitAsDefaultInstance();
  ChainStatus::default_instance_->InitAsDefaultInstance();
  ChainPeerMessage::default_instance_->InitAsDefaultInstance();
  ChainSubscribeTx::default_instance_->InitAsDefaultInstance();
  ChainResponse::default_instance_->InitAsDefaultInstance();
  ChainTxStatus::default_instance_->InitAsDefaultInstance();
  MessageChannelQueryDeposit::default_instance_->InitAsDefaultInstance();
  MessageChannelHello::default_instance_->InitAsDefaultInstance();
  MessageChannelHelloResponse::default_instance_->InitAsDefaultInstance();
  MessageChannel::default_instance_->InitAsDefaultInstance();
  MessageChannelResponse::default_instance_->InitAsDefaultInstance();
  MessageChannelProposer::default_instance_->InitAsDefaultInstance();
  BlockReward::default_instance_->InitAsDefaultInstance();
  MessageChannelCreateChildChain::default_instance_->InitAsDefaultInstance();
  MessageChannelChildGenesesRequest::default_instance_->InitAsDefaultInstance();
  MessageChannelChildGenesesResponse::default_instance_->InitAsDefaultInstance();
  MessageChannelQueryHead::default_instance_->InitAsDefaultInstance();
  MerkelProof::default_instance_->InitAsDefaultInstance();
  MessageChannelDeposit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_overlay_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_overlay_2eproto {
  StaticDescriptorInitializer_overlay_2eproto() {
    protobuf_AddDesc_overlay_2eproto();
  }
} static_descriptor_initializer_overlay_2eproto_;
const ::google::protobuf::EnumDescriptor* OVERLAY_MESSAGE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OVERLAY_MESSAGE_TYPE_descriptor_;
}
bool OVERLAY_MESSAGE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChainMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChainMessageType_descriptor_;
}
bool ChainMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MESSAGE_CHANNEL_NODE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MESSAGE_CHANNEL_NODE_TYPE_descriptor_;
}
bool MESSAGE_CHANNEL_NODE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MESSAGE_CHANNEL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MESSAGE_CHANNEL_TYPE_descriptor_;
}
bool MESSAGE_CHANNEL_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Hello::kNetworkIdFieldNumber;
const int Hello::kLedgerVersionFieldNumber;
const int Hello::kOverlayVersionFieldNumber;
const int Hello::kBumoVersionFieldNumber;
const int Hello::kListeningPortFieldNumber;
const int Hello::kNodeAddressFieldNumber;
const int Hello::kNodeRandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Hello::Hello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Hello)
}

void Hello::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Hello::Hello(const Hello& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Hello)
}

void Hello::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  network_id_ = GOOGLE_LONGLONG(0);
  ledger_version_ = GOOGLE_LONGLONG(0);
  overlay_version_ = GOOGLE_LONGLONG(0);
  bumo_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listening_port_ = GOOGLE_LONGLONG(0);
  node_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_rand_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Hello::~Hello() {
  // @@protoc_insertion_point(destructor:protocol.Hello)
  SharedDtor();
}

void Hello::SharedDtor() {
  bumo_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_rand_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Hello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hello_descriptor_;
}

const Hello& Hello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

Hello* Hello::default_instance_ = NULL;

Hello* Hello::New(::google::protobuf::Arena* arena) const {
  Hello* n = new Hello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Hello::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Hello)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Hello, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Hello*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(network_id_, overlay_version_);
  bumo_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  listening_port_ = GOOGLE_LONGLONG(0);
  node_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_rand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Hello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Hello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 network_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &network_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ledger_version;
        break;
      }

      // optional int64 ledger_version = 2;
      case 2: {
        if (tag == 16) {
         parse_ledger_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ledger_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_overlay_version;
        break;
      }

      // optional int64 overlay_version = 3;
      case 3: {
        if (tag == 24) {
         parse_overlay_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &overlay_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bumo_version;
        break;
      }

      // optional string bumo_version = 4;
      case 4: {
        if (tag == 34) {
         parse_bumo_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bumo_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bumo_version().data(), this->bumo_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.Hello.bumo_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_listening_port;
        break;
      }

      // optional int64 listening_port = 5;
      case 5: {
        if (tag == 40) {
         parse_listening_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &listening_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_node_address;
        break;
      }

      // optional string node_address = 6;
      case 6: {
        if (tag == 50) {
         parse_node_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_address().data(), this->node_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.Hello.node_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_node_rand;
        break;
      }

      // optional string node_rand = 7;
      case 7: {
        if (tag == 58) {
         parse_node_rand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_rand()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_rand().data(), this->node_rand().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.Hello.node_rand"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Hello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Hello)
  return false;
#undef DO_
}

void Hello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Hello)
  // optional int64 network_id = 1;
  if (this->network_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->network_id(), output);
  }

  // optional int64 ledger_version = 2;
  if (this->ledger_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ledger_version(), output);
  }

  // optional int64 overlay_version = 3;
  if (this->overlay_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->overlay_version(), output);
  }

  // optional string bumo_version = 4;
  if (this->bumo_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bumo_version().data(), this->bumo_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.Hello.bumo_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bumo_version(), output);
  }

  // optional int64 listening_port = 5;
  if (this->listening_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->listening_port(), output);
  }

  // optional string node_address = 6;
  if (this->node_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_address().data(), this->node_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.Hello.node_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->node_address(), output);
  }

  // optional string node_rand = 7;
  if (this->node_rand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_rand().data(), this->node_rand().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.Hello.node_rand");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->node_rand(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.Hello)
}

::google::protobuf::uint8* Hello::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Hello)
  // optional int64 network_id = 1;
  if (this->network_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->network_id(), target);
  }

  // optional int64 ledger_version = 2;
  if (this->ledger_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ledger_version(), target);
  }

  // optional int64 overlay_version = 3;
  if (this->overlay_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->overlay_version(), target);
  }

  // optional string bumo_version = 4;
  if (this->bumo_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bumo_version().data(), this->bumo_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.Hello.bumo_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bumo_version(), target);
  }

  // optional int64 listening_port = 5;
  if (this->listening_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->listening_port(), target);
  }

  // optional string node_address = 6;
  if (this->node_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_address().data(), this->node_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.Hello.node_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->node_address(), target);
  }

  // optional string node_rand = 7;
  if (this->node_rand().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_rand().data(), this->node_rand().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.Hello.node_rand");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->node_rand(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.Hello)
  return target;
}

int Hello::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Hello)
  int total_size = 0;

  // optional int64 network_id = 1;
  if (this->network_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->network_id());
  }

  // optional int64 ledger_version = 2;
  if (this->ledger_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ledger_version());
  }

  // optional int64 overlay_version = 3;
  if (this->overlay_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->overlay_version());
  }

  // optional string bumo_version = 4;
  if (this->bumo_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bumo_version());
  }

  // optional int64 listening_port = 5;
  if (this->listening_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->listening_port());
  }

  // optional string node_address = 6;
  if (this->node_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_address());
  }

  // optional string node_rand = 7;
  if (this->node_rand().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_rand());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Hello)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Hello* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Hello>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Hello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Hello)
    MergeFrom(*source);
  }
}

void Hello::MergeFrom(const Hello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Hello)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.network_id() != 0) {
    set_network_id(from.network_id());
  }
  if (from.ledger_version() != 0) {
    set_ledger_version(from.ledger_version());
  }
  if (from.overlay_version() != 0) {
    set_overlay_version(from.overlay_version());
  }
  if (from.bumo_version().size() > 0) {

    bumo_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bumo_version_);
  }
  if (from.listening_port() != 0) {
    set_listening_port(from.listening_port());
  }
  if (from.node_address().size() > 0) {

    node_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_address_);
  }
  if (from.node_rand().size() > 0) {

    node_rand_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_rand_);
  }
}

void Hello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hello::CopyFrom(const Hello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {

  return true;
}

void Hello::Swap(Hello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Hello::InternalSwap(Hello* other) {
  std::swap(network_id_, other->network_id_);
  std::swap(ledger_version_, other->ledger_version_);
  std::swap(overlay_version_, other->overlay_version_);
  bumo_version_.Swap(&other->bumo_version_);
  std::swap(listening_port_, other->listening_port_);
  node_address_.Swap(&other->node_address_);
  node_rand_.Swap(&other->node_rand_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Hello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hello_descriptor_;
  metadata.reflection = Hello_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Hello

// optional int64 network_id = 1;
void Hello::clear_network_id() {
  network_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Hello::network_id() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.network_id)
  return network_id_;
}
 void Hello::set_network_id(::google::protobuf::int64 value) {
  
  network_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Hello.network_id)
}

// optional int64 ledger_version = 2;
void Hello::clear_ledger_version() {
  ledger_version_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Hello::ledger_version() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.ledger_version)
  return ledger_version_;
}
 void Hello::set_ledger_version(::google::protobuf::int64 value) {
  
  ledger_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.Hello.ledger_version)
}

// optional int64 overlay_version = 3;
void Hello::clear_overlay_version() {
  overlay_version_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Hello::overlay_version() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.overlay_version)
  return overlay_version_;
}
 void Hello::set_overlay_version(::google::protobuf::int64 value) {
  
  overlay_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.Hello.overlay_version)
}

// optional string bumo_version = 4;
void Hello::clear_bumo_version() {
  bumo_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Hello::bumo_version() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.bumo_version)
  return bumo_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Hello::set_bumo_version(const ::std::string& value) {
  
  bumo_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Hello.bumo_version)
}
 void Hello::set_bumo_version(const char* value) {
  
  bumo_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Hello.bumo_version)
}
 void Hello::set_bumo_version(const char* value, size_t size) {
  
  bumo_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Hello.bumo_version)
}
 ::std::string* Hello::mutable_bumo_version() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Hello.bumo_version)
  return bumo_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Hello::release_bumo_version() {
  // @@protoc_insertion_point(field_release:protocol.Hello.bumo_version)
  
  return bumo_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Hello::set_allocated_bumo_version(::std::string* bumo_version) {
  if (bumo_version != NULL) {
    
  } else {
    
  }
  bumo_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bumo_version);
  // @@protoc_insertion_point(field_set_allocated:protocol.Hello.bumo_version)
}

// optional int64 listening_port = 5;
void Hello::clear_listening_port() {
  listening_port_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Hello::listening_port() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.listening_port)
  return listening_port_;
}
 void Hello::set_listening_port(::google::protobuf::int64 value) {
  
  listening_port_ = value;
  // @@protoc_insertion_point(field_set:protocol.Hello.listening_port)
}

// optional string node_address = 6;
void Hello::clear_node_address() {
  node_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Hello::node_address() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.node_address)
  return node_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Hello::set_node_address(const ::std::string& value) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Hello.node_address)
}
 void Hello::set_node_address(const char* value) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Hello.node_address)
}
 void Hello::set_node_address(const char* value, size_t size) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Hello.node_address)
}
 ::std::string* Hello::mutable_node_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Hello.node_address)
  return node_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Hello::release_node_address() {
  // @@protoc_insertion_point(field_release:protocol.Hello.node_address)
  
  return node_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Hello::set_allocated_node_address(::std::string* node_address) {
  if (node_address != NULL) {
    
  } else {
    
  }
  node_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Hello.node_address)
}

// optional string node_rand = 7;
void Hello::clear_node_rand() {
  node_rand_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Hello::node_rand() const {
  // @@protoc_insertion_point(field_get:protocol.Hello.node_rand)
  return node_rand_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Hello::set_node_rand(const ::std::string& value) {
  
  node_rand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Hello.node_rand)
}
 void Hello::set_node_rand(const char* value) {
  
  node_rand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Hello.node_rand)
}
 void Hello::set_node_rand(const char* value, size_t size) {
  
  node_rand_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Hello.node_rand)
}
 ::std::string* Hello::mutable_node_rand() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Hello.node_rand)
  return node_rand_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Hello::release_node_rand() {
  // @@protoc_insertion_point(field_release:protocol.Hello.node_rand)
  
  return node_rand_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Hello::set_allocated_node_rand(::std::string* node_rand) {
  if (node_rand != NULL) {
    
  } else {
    
  }
  node_rand_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_rand);
  // @@protoc_insertion_point(field_set_allocated:protocol.Hello.node_rand)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HelloResponse::kErrorCodeFieldNumber;
const int HelloResponse::kErrorDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HelloResponse::HelloResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.HelloResponse)
}

void HelloResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HelloResponse::HelloResponse(const HelloResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.HelloResponse)
}

void HelloResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  error_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HelloResponse::~HelloResponse() {
  // @@protoc_insertion_point(destructor:protocol.HelloResponse)
  SharedDtor();
}

void HelloResponse::SharedDtor() {
  error_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HelloResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloResponse_descriptor_;
}

const HelloResponse& HelloResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

HelloResponse* HelloResponse::default_instance_ = NULL;

HelloResponse* HelloResponse::New(::google::protobuf::Arena* arena) const {
  HelloResponse* n = new HelloResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HelloResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.HelloResponse)
  error_code_ = 0;
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HelloResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.HelloResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.ERRORCODE error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::protocol::ERRORCODE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_desc;
        break;
      }

      // optional string error_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_error_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_desc().data(), this->error_desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.HelloResponse.error_desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.HelloResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.HelloResponse)
  return false;
#undef DO_
}

void HelloResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.HelloResponse)
  // optional .protocol.ERRORCODE error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.HelloResponse.error_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_desc(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.HelloResponse)
}

::google::protobuf::uint8* HelloResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.HelloResponse)
  // optional .protocol.ERRORCODE error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.HelloResponse.error_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_desc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.HelloResponse)
  return target;
}

int HelloResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.HelloResponse)
  int total_size = 0;

  // optional .protocol.ERRORCODE error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_desc());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.HelloResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HelloResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HelloResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.HelloResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.HelloResponse)
    MergeFrom(*source);
  }
}

void HelloResponse::MergeFrom(const HelloResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.HelloResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_desc().size() > 0) {

    error_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_desc_);
  }
}

void HelloResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.HelloResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloResponse::CopyFrom(const HelloResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.HelloResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloResponse::IsInitialized() const {

  return true;
}

void HelloResponse::Swap(HelloResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HelloResponse::InternalSwap(HelloResponse* other) {
  std::swap(error_code_, other->error_code_);
  error_desc_.Swap(&other->error_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HelloResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloResponse_descriptor_;
  metadata.reflection = HelloResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HelloResponse

// optional .protocol.ERRORCODE error_code = 1;
void HelloResponse::clear_error_code() {
  error_code_ = 0;
}
 ::protocol::ERRORCODE HelloResponse::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.HelloResponse.error_code)
  return static_cast< ::protocol::ERRORCODE >(error_code_);
}
 void HelloResponse::set_error_code(::protocol::ERRORCODE value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.HelloResponse.error_code)
}

// optional string error_desc = 2;
void HelloResponse::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HelloResponse::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.HelloResponse.error_desc)
  return error_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HelloResponse::set_error_desc(const ::std::string& value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.HelloResponse.error_desc)
}
 void HelloResponse::set_error_desc(const char* value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.HelloResponse.error_desc)
}
 void HelloResponse::set_error_desc(const char* value, size_t size) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.HelloResponse.error_desc)
}
 ::std::string* HelloResponse::mutable_error_desc() {
  
  // @@protoc_insertion_point(field_mutable:protocol.HelloResponse.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HelloResponse::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.HelloResponse.error_desc)
  
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HelloResponse::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    
  } else {
    
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.HelloResponse.error_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peer::kIpFieldNumber;
const int Peer::kPortFieldNumber;
const int Peer::kNumFailuresFieldNumber;
const int Peer::kNextAttemptTimeFieldNumber;
const int Peer::kActiveTimeFieldNumber;
const int Peer::kConnectionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peer::Peer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Peer)
}

void Peer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Peer::Peer(const Peer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Peer)
}

void Peer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = GOOGLE_LONGLONG(0);
  num_failures_ = GOOGLE_LONGLONG(0);
  next_attempt_time_ = GOOGLE_LONGLONG(0);
  active_time_ = GOOGLE_LONGLONG(0);
  connection_id_ = GOOGLE_LONGLONG(0);
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:protocol.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Peer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Peer_descriptor_;
}

const Peer& Peer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

Peer* Peer::default_instance_ = NULL;

Peer* Peer::New(::google::protobuf::Arena* arena) const {
  Peer* n = new Peer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Peer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Peer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Peer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(port_, connection_id_);
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Peer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Peer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.Peer.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int64 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_failures;
        break;
      }

      // optional int64 num_failures = 3;
      case 3: {
        if (tag == 24) {
         parse_num_failures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_failures_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_next_attempt_time;
        break;
      }

      // optional int64 next_attempt_time = 4;
      case 4: {
        if (tag == 32) {
         parse_next_attempt_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_attempt_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_active_time;
        break;
      }

      // optional int64 active_time = 5;
      case 5: {
        if (tag == 40) {
         parse_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &active_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_connection_id;
        break;
      }

      // optional int64 connection_id = 6;
      case 6: {
        if (tag == 48) {
         parse_connection_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &connection_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Peer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Peer)
  return false;
#undef DO_
}

void Peer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Peer)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.Peer.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int64 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->port(), output);
  }

  // optional int64 num_failures = 3;
  if (this->num_failures() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num_failures(), output);
  }

  // optional int64 next_attempt_time = 4;
  if (this->next_attempt_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->next_attempt_time(), output);
  }

  // optional int64 active_time = 5;
  if (this->active_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->active_time(), output);
  }

  // optional int64 connection_id = 6;
  if (this->connection_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->connection_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.Peer)
}

::google::protobuf::uint8* Peer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Peer)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.Peer.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int64 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->port(), target);
  }

  // optional int64 num_failures = 3;
  if (this->num_failures() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num_failures(), target);
  }

  // optional int64 next_attempt_time = 4;
  if (this->next_attempt_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->next_attempt_time(), target);
  }

  // optional int64 active_time = 5;
  if (this->active_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->active_time(), target);
  }

  // optional int64 connection_id = 6;
  if (this->connection_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->connection_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.Peer)
  return target;
}

int Peer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Peer)
  int total_size = 0;

  // optional string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional int64 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->port());
  }

  // optional int64 num_failures = 3;
  if (this->num_failures() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->num_failures());
  }

  // optional int64 next_attempt_time = 4;
  if (this->next_attempt_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->next_attempt_time());
  }

  // optional int64 active_time = 5;
  if (this->active_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->active_time());
  }

  // optional int64 connection_id = 6;
  if (this->connection_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->connection_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Peer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Peer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Peer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Peer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Peer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.num_failures() != 0) {
    set_num_failures(from.num_failures());
  }
  if (from.next_attempt_time() != 0) {
    set_next_attempt_time(from.next_attempt_time());
  }
  if (from.active_time() != 0) {
    set_active_time(from.active_time());
  }
  if (from.connection_id() != 0) {
    set_connection_id(from.connection_id());
  }
}

void Peer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {

  return true;
}

void Peer::Swap(Peer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peer::InternalSwap(Peer* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(num_failures_, other->num_failures_);
  std::swap(next_attempt_time_, other->next_attempt_time_);
  std::swap(active_time_, other->active_time_);
  std::swap(connection_id_, other->connection_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Peer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Peer_descriptor_;
  metadata.reflection = Peer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Peer

// optional string ip = 1;
void Peer::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Peer::ip() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Peer::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Peer.ip)
}
 void Peer::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Peer.ip)
}
 void Peer::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Peer.ip)
}
 ::std::string* Peer::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Peer.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Peer::release_ip() {
  // @@protoc_insertion_point(field_release:protocol.Peer.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Peer::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:protocol.Peer.ip)
}

// optional int64 port = 2;
void Peer::clear_port() {
  port_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Peer::port() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.port)
  return port_;
}
 void Peer::set_port(::google::protobuf::int64 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:protocol.Peer.port)
}

// optional int64 num_failures = 3;
void Peer::clear_num_failures() {
  num_failures_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Peer::num_failures() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.num_failures)
  return num_failures_;
}
 void Peer::set_num_failures(::google::protobuf::int64 value) {
  
  num_failures_ = value;
  // @@protoc_insertion_point(field_set:protocol.Peer.num_failures)
}

// optional int64 next_attempt_time = 4;
void Peer::clear_next_attempt_time() {
  next_attempt_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Peer::next_attempt_time() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.next_attempt_time)
  return next_attempt_time_;
}
 void Peer::set_next_attempt_time(::google::protobuf::int64 value) {
  
  next_attempt_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Peer.next_attempt_time)
}

// optional int64 active_time = 5;
void Peer::clear_active_time() {
  active_time_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Peer::active_time() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.active_time)
  return active_time_;
}
 void Peer::set_active_time(::google::protobuf::int64 value) {
  
  active_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Peer.active_time)
}

// optional int64 connection_id = 6;
void Peer::clear_connection_id() {
  connection_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Peer::connection_id() const {
  // @@protoc_insertion_point(field_get:protocol.Peer.connection_id)
  return connection_id_;
}
 void Peer::set_connection_id(::google::protobuf::int64 value) {
  
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Peer.connection_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Peers::kPeersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Peers::Peers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Peers)
}

void Peers::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Peers::Peers(const Peers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Peers)
}

void Peers::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Peers::~Peers() {
  // @@protoc_insertion_point(destructor:protocol.Peers)
  SharedDtor();
}

void Peers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Peers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Peers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Peers_descriptor_;
}

const Peers& Peers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

Peers* Peers::default_instance_ = NULL;

Peers* Peers::New(::google::protobuf::Arena* arena) const {
  Peers* n = new Peers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Peers::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Peers)
  peers_.Clear();
}

bool Peers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Peers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.Peer peers = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_peers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_peers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_peers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Peers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Peers)
  return false;
#undef DO_
}

void Peers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Peers)
  // repeated .protocol.Peer peers = 1;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->peers(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.Peers)
}

::google::protobuf::uint8* Peers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Peers)
  // repeated .protocol.Peer peers = 1;
  for (unsigned int i = 0, n = this->peers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->peers(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.Peers)
  return target;
}

int Peers::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Peers)
  int total_size = 0;

  // repeated .protocol.Peer peers = 1;
  total_size += 1 * this->peers_size();
  for (int i = 0; i < this->peers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->peers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Peers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Peers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Peers* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Peers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Peers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Peers)
    MergeFrom(*source);
  }
}

void Peers::MergeFrom(const Peers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Peers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  peers_.MergeFrom(from.peers_);
}

void Peers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Peers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peers::CopyFrom(const Peers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Peers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peers::IsInitialized() const {

  return true;
}

void Peers::Swap(Peers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Peers::InternalSwap(Peers* other) {
  peers_.UnsafeArenaSwap(&other->peers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Peers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Peers_descriptor_;
  metadata.reflection = Peers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Peers

// repeated .protocol.Peer peers = 1;
int Peers::peers_size() const {
  return peers_.size();
}
void Peers::clear_peers() {
  peers_.Clear();
}
const ::protocol::Peer& Peers::peers(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Peers.peers)
  return peers_.Get(index);
}
::protocol::Peer* Peers::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Peers.peers)
  return peers_.Mutable(index);
}
::protocol::Peer* Peers::add_peers() {
  // @@protoc_insertion_point(field_add:protocol.Peers.peers)
  return peers_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::Peer >*
Peers::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Peers.peers)
  return &peers_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::Peer >&
Peers::peers() const {
  // @@protoc_insertion_point(field_list:protocol.Peers.peers)
  return peers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetLedgers::kBeginFieldNumber;
const int GetLedgers::kEndFieldNumber;
const int GetLedgers::kTimestampFieldNumber;
const int GetLedgers::kChainIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetLedgers::GetLedgers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.GetLedgers)
}

void GetLedgers::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GetLedgers::GetLedgers(const GetLedgers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.GetLedgers)
}

void GetLedgers::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  begin_ = GOOGLE_LONGLONG(0);
  end_ = GOOGLE_LONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  chain_id_ = GOOGLE_LONGLONG(0);
}

GetLedgers::~GetLedgers() {
  // @@protoc_insertion_point(destructor:protocol.GetLedgers)
  SharedDtor();
}

void GetLedgers::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLedgers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLedgers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLedgers_descriptor_;
}

const GetLedgers& GetLedgers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

GetLedgers* GetLedgers::default_instance_ = NULL;

GetLedgers* GetLedgers::New(::google::protobuf::Arena* arena) const {
  GetLedgers* n = new GetLedgers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetLedgers::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.GetLedgers)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GetLedgers, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GetLedgers*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(begin_, chain_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool GetLedgers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.GetLedgers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 begin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // optional int64 end = 2;
      case 2: {
        if (tag == 16) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chain_id;
        break;
      }

      // optional int64 chain_id = 4;
      case 4: {
        if (tag == 32) {
         parse_chain_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chain_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.GetLedgers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.GetLedgers)
  return false;
#undef DO_
}

void GetLedgers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.GetLedgers)
  // optional int64 begin = 1;
  if (this->begin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begin(), output);
  }

  // optional int64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // optional int64 chain_id = 4;
  if (this->chain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->chain_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.GetLedgers)
}

::google::protobuf::uint8* GetLedgers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.GetLedgers)
  // optional int64 begin = 1;
  if (this->begin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->begin(), target);
  }

  // optional int64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // optional int64 chain_id = 4;
  if (this->chain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->chain_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.GetLedgers)
  return target;
}

int GetLedgers::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.GetLedgers)
  int total_size = 0;

  // optional int64 begin = 1;
  if (this->begin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->begin());
  }

  // optional int64 end = 2;
  if (this->end() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->end());
  }

  // optional int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // optional int64 chain_id = 4;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chain_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLedgers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.GetLedgers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GetLedgers* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GetLedgers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.GetLedgers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.GetLedgers)
    MergeFrom(*source);
  }
}

void GetLedgers::MergeFrom(const GetLedgers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.GetLedgers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.begin() != 0) {
    set_begin(from.begin());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.chain_id() != 0) {
    set_chain_id(from.chain_id());
  }
}

void GetLedgers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.GetLedgers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLedgers::CopyFrom(const GetLedgers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.GetLedgers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLedgers::IsInitialized() const {

  return true;
}

void GetLedgers::Swap(GetLedgers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetLedgers::InternalSwap(GetLedgers* other) {
  std::swap(begin_, other->begin_);
  std::swap(end_, other->end_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(chain_id_, other->chain_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetLedgers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLedgers_descriptor_;
  metadata.reflection = GetLedgers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetLedgers

// optional int64 begin = 1;
void GetLedgers::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetLedgers::begin() const {
  // @@protoc_insertion_point(field_get:protocol.GetLedgers.begin)
  return begin_;
}
 void GetLedgers::set_begin(::google::protobuf::int64 value) {
  
  begin_ = value;
  // @@protoc_insertion_point(field_set:protocol.GetLedgers.begin)
}

// optional int64 end = 2;
void GetLedgers::clear_end() {
  end_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetLedgers::end() const {
  // @@protoc_insertion_point(field_get:protocol.GetLedgers.end)
  return end_;
}
 void GetLedgers::set_end(::google::protobuf::int64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:protocol.GetLedgers.end)
}

// optional int64 timestamp = 3;
void GetLedgers::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetLedgers::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.GetLedgers.timestamp)
  return timestamp_;
}
 void GetLedgers::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.GetLedgers.timestamp)
}

// optional int64 chain_id = 4;
void GetLedgers::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 GetLedgers::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.GetLedgers.chain_id)
  return chain_id_;
}
 void GetLedgers::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.GetLedgers.chain_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Ledgers_SyncCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ledgers_SyncCode_descriptor_;
}
bool Ledgers_SyncCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Ledgers_SyncCode Ledgers::OK;
const Ledgers_SyncCode Ledgers::OUT_OF_SYNC;
const Ledgers_SyncCode Ledgers::OUT_OF_LEDGERS;
const Ledgers_SyncCode Ledgers::BUSY;
const Ledgers_SyncCode Ledgers::REFUSE;
const Ledgers_SyncCode Ledgers::INTERNAL;
const Ledgers_SyncCode Ledgers::SyncCode_MIN;
const Ledgers_SyncCode Ledgers::SyncCode_MAX;
const int Ledgers::SyncCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ledgers::kValuesFieldNumber;
const int Ledgers::kSyncCodeFieldNumber;
const int Ledgers::kMaxSeqFieldNumber;
const int Ledgers::kProofFieldNumber;
const int Ledgers::kChainIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ledgers::Ledgers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Ledgers)
}

void Ledgers::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Ledgers::Ledgers(const Ledgers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.Ledgers)
}

void Ledgers::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sync_code_ = 0;
  max_seq_ = GOOGLE_LONGLONG(0);
  proof_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_ = GOOGLE_LONGLONG(0);
}

Ledgers::~Ledgers() {
  // @@protoc_insertion_point(destructor:protocol.Ledgers)
  SharedDtor();
}

void Ledgers::SharedDtor() {
  proof_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Ledgers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ledgers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ledgers_descriptor_;
}

const Ledgers& Ledgers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

Ledgers* Ledgers::default_instance_ = NULL;

Ledgers* Ledgers::New(::google::protobuf::Arena* arena) const {
  Ledgers* n = new Ledgers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ledgers::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Ledgers)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Ledgers, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Ledgers*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(chain_id_, sync_code_);
  max_seq_ = GOOGLE_LONGLONG(0);
  proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  values_.Clear();
}

bool Ledgers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Ledgers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.ConsensusValue values = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_values;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_sync_code;
        break;
      }

      // optional .protocol.Ledgers.SyncCode sync_code = 2;
      case 2: {
        if (tag == 16) {
         parse_sync_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sync_code(static_cast< ::protocol::Ledgers_SyncCode >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_seq;
        break;
      }

      // optional int64 max_seq = 3;
      case 3: {
        if (tag == 24) {
         parse_max_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_proof;
        break;
      }

      // optional bytes proof = 4;
      case 4: {
        if (tag == 34) {
         parse_proof:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proof()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_chain_id;
        break;
      }

      // optional int64 chain_id = 5;
      case 5: {
        if (tag == 40) {
         parse_chain_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chain_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Ledgers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Ledgers)
  return false;
#undef DO_
}

void Ledgers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Ledgers)
  // repeated .protocol.ConsensusValue values = 1;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }

  // optional .protocol.Ledgers.SyncCode sync_code = 2;
  if (this->sync_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sync_code(), output);
  }

  // optional int64 max_seq = 3;
  if (this->max_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->max_seq(), output);
  }

  // optional bytes proof = 4;
  if (this->proof().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->proof(), output);
  }

  // optional int64 chain_id = 5;
  if (this->chain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->chain_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.Ledgers)
}

::google::protobuf::uint8* Ledgers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Ledgers)
  // repeated .protocol.ConsensusValue values = 1;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->values(i), false, target);
  }

  // optional .protocol.Ledgers.SyncCode sync_code = 2;
  if (this->sync_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sync_code(), target);
  }

  // optional int64 max_seq = 3;
  if (this->max_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->max_seq(), target);
  }

  // optional bytes proof = 4;
  if (this->proof().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->proof(), target);
  }

  // optional int64 chain_id = 5;
  if (this->chain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->chain_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.Ledgers)
  return target;
}

int Ledgers::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Ledgers)
  int total_size = 0;

  // optional .protocol.Ledgers.SyncCode sync_code = 2;
  if (this->sync_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sync_code());
  }

  // optional int64 max_seq = 3;
  if (this->max_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->max_seq());
  }

  // optional bytes proof = 4;
  if (this->proof().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proof());
  }

  // optional int64 chain_id = 5;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chain_id());
  }

  // repeated .protocol.ConsensusValue values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ledgers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Ledgers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Ledgers* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Ledgers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Ledgers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Ledgers)
    MergeFrom(*source);
  }
}

void Ledgers::MergeFrom(const Ledgers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Ledgers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  values_.MergeFrom(from.values_);
  if (from.sync_code() != 0) {
    set_sync_code(from.sync_code());
  }
  if (from.max_seq() != 0) {
    set_max_seq(from.max_seq());
  }
  if (from.proof().size() > 0) {

    proof_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proof_);
  }
  if (from.chain_id() != 0) {
    set_chain_id(from.chain_id());
  }
}

void Ledgers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Ledgers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ledgers::CopyFrom(const Ledgers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Ledgers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ledgers::IsInitialized() const {

  return true;
}

void Ledgers::Swap(Ledgers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ledgers::InternalSwap(Ledgers* other) {
  values_.UnsafeArenaSwap(&other->values_);
  std::swap(sync_code_, other->sync_code_);
  std::swap(max_seq_, other->max_seq_);
  proof_.Swap(&other->proof_);
  std::swap(chain_id_, other->chain_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ledgers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ledgers_descriptor_;
  metadata.reflection = Ledgers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ledgers

// repeated .protocol.ConsensusValue values = 1;
int Ledgers::values_size() const {
  return values_.size();
}
void Ledgers::clear_values() {
  values_.Clear();
}
const ::protocol::ConsensusValue& Ledgers::values(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.values)
  return values_.Get(index);
}
::protocol::ConsensusValue* Ledgers::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Ledgers.values)
  return values_.Mutable(index);
}
::protocol::ConsensusValue* Ledgers::add_values() {
  // @@protoc_insertion_point(field_add:protocol.Ledgers.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::protocol::ConsensusValue >*
Ledgers::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Ledgers.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::protocol::ConsensusValue >&
Ledgers::values() const {
  // @@protoc_insertion_point(field_list:protocol.Ledgers.values)
  return values_;
}

// optional .protocol.Ledgers.SyncCode sync_code = 2;
void Ledgers::clear_sync_code() {
  sync_code_ = 0;
}
 ::protocol::Ledgers_SyncCode Ledgers::sync_code() const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.sync_code)
  return static_cast< ::protocol::Ledgers_SyncCode >(sync_code_);
}
 void Ledgers::set_sync_code(::protocol::Ledgers_SyncCode value) {
  
  sync_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.Ledgers.sync_code)
}

// optional int64 max_seq = 3;
void Ledgers::clear_max_seq() {
  max_seq_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Ledgers::max_seq() const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.max_seq)
  return max_seq_;
}
 void Ledgers::set_max_seq(::google::protobuf::int64 value) {
  
  max_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.Ledgers.max_seq)
}

// optional bytes proof = 4;
void Ledgers::clear_proof() {
  proof_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Ledgers::proof() const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.proof)
  return proof_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ledgers::set_proof(const ::std::string& value) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Ledgers.proof)
}
 void Ledgers::set_proof(const char* value) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Ledgers.proof)
}
 void Ledgers::set_proof(const void* value, size_t size) {
  
  proof_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Ledgers.proof)
}
 ::std::string* Ledgers::mutable_proof() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Ledgers.proof)
  return proof_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Ledgers::release_proof() {
  // @@protoc_insertion_point(field_release:protocol.Ledgers.proof)
  
  return proof_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Ledgers::set_allocated_proof(::std::string* proof) {
  if (proof != NULL) {
    
  } else {
    
  }
  proof_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proof);
  // @@protoc_insertion_point(field_set_allocated:protocol.Ledgers.proof)
}

// optional int64 chain_id = 5;
void Ledgers::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Ledgers::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.Ledgers.chain_id)
  return chain_id_;
}
 void Ledgers::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Ledgers.chain_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DontHave::kTypeFieldNumber;
const int DontHave::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DontHave::DontHave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.DontHave)
}

void DontHave::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DontHave::DontHave(const DontHave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.DontHave)
}

void DontHave::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = GOOGLE_LONGLONG(0);
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DontHave::~DontHave() {
  // @@protoc_insertion_point(destructor:protocol.DontHave)
  SharedDtor();
}

void DontHave::SharedDtor() {
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DontHave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DontHave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DontHave_descriptor_;
}

const DontHave& DontHave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

DontHave* DontHave::default_instance_ = NULL;

DontHave* DontHave::New(::google::protobuf::Arena* arena) const {
  DontHave* n = new DontHave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DontHave::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DontHave)
  type_ = GOOGLE_LONGLONG(0);
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DontHave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.DontHave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }

      // optional bytes hash = 2;
      case 2: {
        if (tag == 18) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.DontHave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.DontHave)
  return false;
#undef DO_
}

void DontHave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.DontHave)
  // optional int64 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->type(), output);
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.DontHave)
}

::google::protobuf::uint8* DontHave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DontHave)
  // optional int64 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->type(), target);
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.DontHave)
  return target;
}

int DontHave::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DontHave)
  int total_size = 0;

  // optional int64 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->type());
  }

  // optional bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DontHave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.DontHave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DontHave* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DontHave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.DontHave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.DontHave)
    MergeFrom(*source);
  }
}

void DontHave::MergeFrom(const DontHave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DontHave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
}

void DontHave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.DontHave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DontHave::CopyFrom(const DontHave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DontHave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DontHave::IsInitialized() const {

  return true;
}

void DontHave::Swap(DontHave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DontHave::InternalSwap(DontHave* other) {
  std::swap(type_, other->type_);
  hash_.Swap(&other->hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DontHave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DontHave_descriptor_;
  metadata.reflection = DontHave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DontHave

// optional int64 type = 1;
void DontHave::clear_type() {
  type_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 DontHave::type() const {
  // @@protoc_insertion_point(field_get:protocol.DontHave.type)
  return type_;
}
 void DontHave::set_type(::google::protobuf::int64 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.DontHave.type)
}

// optional bytes hash = 2;
void DontHave::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DontHave::hash() const {
  // @@protoc_insertion_point(field_get:protocol.DontHave.hash)
  return hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DontHave::set_hash(const ::std::string& value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.DontHave.hash)
}
 void DontHave::set_hash(const char* value) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.DontHave.hash)
}
 void DontHave::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.DontHave.hash)
}
 ::std::string* DontHave::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.DontHave.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DontHave::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.DontHave.hash)
  
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DontHave::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.DontHave.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LedgerUpgradeNotify::kNonceFieldNumber;
const int LedgerUpgradeNotify::kUpgradeFieldNumber;
const int LedgerUpgradeNotify::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LedgerUpgradeNotify::LedgerUpgradeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.LedgerUpgradeNotify)
}

void LedgerUpgradeNotify::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  upgrade_ = const_cast< ::protocol::LedgerUpgrade*>(&::protocol::LedgerUpgrade::default_instance());
  signature_ = const_cast< ::protocol::Signature*>(&::protocol::Signature::default_instance());
}

LedgerUpgradeNotify::LedgerUpgradeNotify(const LedgerUpgradeNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.LedgerUpgradeNotify)
}

void LedgerUpgradeNotify::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  nonce_ = GOOGLE_LONGLONG(0);
  upgrade_ = NULL;
  signature_ = NULL;
}

LedgerUpgradeNotify::~LedgerUpgradeNotify() {
  // @@protoc_insertion_point(destructor:protocol.LedgerUpgradeNotify)
  SharedDtor();
}

void LedgerUpgradeNotify::SharedDtor() {
  if (this != default_instance_) {
    delete upgrade_;
    delete signature_;
  }
}

void LedgerUpgradeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LedgerUpgradeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LedgerUpgradeNotify_descriptor_;
}

const LedgerUpgradeNotify& LedgerUpgradeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

LedgerUpgradeNotify* LedgerUpgradeNotify::default_instance_ = NULL;

LedgerUpgradeNotify* LedgerUpgradeNotify::New(::google::protobuf::Arena* arena) const {
  LedgerUpgradeNotify* n = new LedgerUpgradeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LedgerUpgradeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.LedgerUpgradeNotify)
  nonce_ = GOOGLE_LONGLONG(0);
  if (GetArenaNoVirtual() == NULL && upgrade_ != NULL) delete upgrade_;
  upgrade_ = NULL;
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) delete signature_;
  signature_ = NULL;
}

bool LedgerUpgradeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.LedgerUpgradeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 nonce = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nonce_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_upgrade;
        break;
      }

      // optional .protocol.LedgerUpgrade upgrade = 2;
      case 2: {
        if (tag == 18) {
         parse_upgrade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upgrade()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_signature;
        break;
      }

      // optional .protocol.Signature signature = 3;
      case 3: {
        if (tag == 26) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.LedgerUpgradeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.LedgerUpgradeNotify)
  return false;
#undef DO_
}

void LedgerUpgradeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.LedgerUpgradeNotify)
  // optional int64 nonce = 1;
  if (this->nonce() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->nonce(), output);
  }

  // optional .protocol.LedgerUpgrade upgrade = 2;
  if (this->has_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->upgrade_, output);
  }

  // optional .protocol.Signature signature = 3;
  if (this->has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->signature_, output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.LedgerUpgradeNotify)
}

::google::protobuf::uint8* LedgerUpgradeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.LedgerUpgradeNotify)
  // optional int64 nonce = 1;
  if (this->nonce() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->nonce(), target);
  }

  // optional .protocol.LedgerUpgrade upgrade = 2;
  if (this->has_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->upgrade_, false, target);
  }

  // optional .protocol.Signature signature = 3;
  if (this->has_signature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->signature_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.LedgerUpgradeNotify)
  return target;
}

int LedgerUpgradeNotify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.LedgerUpgradeNotify)
  int total_size = 0;

  // optional int64 nonce = 1;
  if (this->nonce() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nonce());
  }

  // optional .protocol.LedgerUpgrade upgrade = 2;
  if (this->has_upgrade()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->upgrade_);
  }

  // optional .protocol.Signature signature = 3;
  if (this->has_signature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->signature_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LedgerUpgradeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.LedgerUpgradeNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LedgerUpgradeNotify* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LedgerUpgradeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.LedgerUpgradeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.LedgerUpgradeNotify)
    MergeFrom(*source);
  }
}

void LedgerUpgradeNotify::MergeFrom(const LedgerUpgradeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.LedgerUpgradeNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.nonce() != 0) {
    set_nonce(from.nonce());
  }
  if (from.has_upgrade()) {
    mutable_upgrade()->::protocol::LedgerUpgrade::MergeFrom(from.upgrade());
  }
  if (from.has_signature()) {
    mutable_signature()->::protocol::Signature::MergeFrom(from.signature());
  }
}

void LedgerUpgradeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.LedgerUpgradeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LedgerUpgradeNotify::CopyFrom(const LedgerUpgradeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.LedgerUpgradeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LedgerUpgradeNotify::IsInitialized() const {

  return true;
}

void LedgerUpgradeNotify::Swap(LedgerUpgradeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LedgerUpgradeNotify::InternalSwap(LedgerUpgradeNotify* other) {
  std::swap(nonce_, other->nonce_);
  std::swap(upgrade_, other->upgrade_);
  std::swap(signature_, other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LedgerUpgradeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LedgerUpgradeNotify_descriptor_;
  metadata.reflection = LedgerUpgradeNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LedgerUpgradeNotify

// optional int64 nonce = 1;
void LedgerUpgradeNotify::clear_nonce() {
  nonce_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LedgerUpgradeNotify::nonce() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerUpgradeNotify.nonce)
  return nonce_;
}
 void LedgerUpgradeNotify::set_nonce(::google::protobuf::int64 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:protocol.LedgerUpgradeNotify.nonce)
}

// optional .protocol.LedgerUpgrade upgrade = 2;
bool LedgerUpgradeNotify::has_upgrade() const {
  return !_is_default_instance_ && upgrade_ != NULL;
}
void LedgerUpgradeNotify::clear_upgrade() {
  if (GetArenaNoVirtual() == NULL && upgrade_ != NULL) delete upgrade_;
  upgrade_ = NULL;
}
const ::protocol::LedgerUpgrade& LedgerUpgradeNotify::upgrade() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerUpgradeNotify.upgrade)
  return upgrade_ != NULL ? *upgrade_ : *default_instance_->upgrade_;
}
::protocol::LedgerUpgrade* LedgerUpgradeNotify::mutable_upgrade() {
  
  if (upgrade_ == NULL) {
    upgrade_ = new ::protocol::LedgerUpgrade;
  }
  // @@protoc_insertion_point(field_mutable:protocol.LedgerUpgradeNotify.upgrade)
  return upgrade_;
}
::protocol::LedgerUpgrade* LedgerUpgradeNotify::release_upgrade() {
  // @@protoc_insertion_point(field_release:protocol.LedgerUpgradeNotify.upgrade)
  
  ::protocol::LedgerUpgrade* temp = upgrade_;
  upgrade_ = NULL;
  return temp;
}
void LedgerUpgradeNotify::set_allocated_upgrade(::protocol::LedgerUpgrade* upgrade) {
  delete upgrade_;
  upgrade_ = upgrade;
  if (upgrade) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.LedgerUpgradeNotify.upgrade)
}

// optional .protocol.Signature signature = 3;
bool LedgerUpgradeNotify::has_signature() const {
  return !_is_default_instance_ && signature_ != NULL;
}
void LedgerUpgradeNotify::clear_signature() {
  if (GetArenaNoVirtual() == NULL && signature_ != NULL) delete signature_;
  signature_ = NULL;
}
const ::protocol::Signature& LedgerUpgradeNotify::signature() const {
  // @@protoc_insertion_point(field_get:protocol.LedgerUpgradeNotify.signature)
  return signature_ != NULL ? *signature_ : *default_instance_->signature_;
}
::protocol::Signature* LedgerUpgradeNotify::mutable_signature() {
  
  if (signature_ == NULL) {
    signature_ = new ::protocol::Signature;
  }
  // @@protoc_insertion_point(field_mutable:protocol.LedgerUpgradeNotify.signature)
  return signature_;
}
::protocol::Signature* LedgerUpgradeNotify::release_signature() {
  // @@protoc_insertion_point(field_release:protocol.LedgerUpgradeNotify.signature)
  
  ::protocol::Signature* temp = signature_;
  signature_ = NULL;
  return temp;
}
void LedgerUpgradeNotify::set_allocated_signature(::protocol::Signature* signature) {
  delete signature_;
  signature_ = signature;
  if (signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.LedgerUpgradeNotify.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntryList::kEntryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntryList::EntryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.EntryList)
}

void EntryList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EntryList::EntryList(const EntryList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.EntryList)
}

void EntryList::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

EntryList::~EntryList() {
  // @@protoc_insertion_point(destructor:protocol.EntryList)
  SharedDtor();
}

void EntryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntryList_descriptor_;
}

const EntryList& EntryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

EntryList* EntryList::default_instance_ = NULL;

EntryList* EntryList::New(::google::protobuf::Arena* arena) const {
  EntryList* n = new EntryList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.EntryList)
  entry_.Clear();
}

bool EntryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.EntryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes entry = 1;
      case 1: {
        if (tag == 10) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_entry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.EntryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.EntryList)
  return false;
#undef DO_
}

void EntryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.EntryList)
  // repeated bytes entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->entry(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.EntryList)
}

::google::protobuf::uint8* EntryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.EntryList)
  // repeated bytes entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->entry(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.EntryList)
  return target;
}

int EntryList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.EntryList)
  int total_size = 0;

  // repeated bytes entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->entry(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.EntryList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EntryList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EntryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.EntryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.EntryList)
    MergeFrom(*source);
  }
}

void EntryList::MergeFrom(const EntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.EntryList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  entry_.MergeFrom(from.entry_);
}

void EntryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.EntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntryList::CopyFrom(const EntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.EntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryList::IsInitialized() const {

  return true;
}

void EntryList::Swap(EntryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntryList::InternalSwap(EntryList* other) {
  entry_.UnsafeArenaSwap(&other->entry_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntryList_descriptor_;
  metadata.reflection = EntryList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntryList

// repeated bytes entry = 1;
int EntryList::entry_size() const {
  return entry_.size();
}
void EntryList::clear_entry() {
  entry_.Clear();
}
 const ::std::string& EntryList::entry(int index) const {
  // @@protoc_insertion_point(field_get:protocol.EntryList.entry)
  return entry_.Get(index);
}
 ::std::string* EntryList::mutable_entry(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.EntryList.entry)
  return entry_.Mutable(index);
}
 void EntryList::set_entry(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.EntryList.entry)
  entry_.Mutable(index)->assign(value);
}
 void EntryList::set_entry(int index, const char* value) {
  entry_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.EntryList.entry)
}
 void EntryList::set_entry(int index, const void* value, size_t size) {
  entry_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.EntryList.entry)
}
 ::std::string* EntryList::add_entry() {
  // @@protoc_insertion_point(field_add_mutable:protocol.EntryList.entry)
  return entry_.Add();
}
 void EntryList::add_entry(const ::std::string& value) {
  entry_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.EntryList.entry)
}
 void EntryList::add_entry(const char* value) {
  entry_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.EntryList.entry)
}
 void EntryList::add_entry(const void* value, size_t size) {
  entry_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.EntryList.entry)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
EntryList::entry() const {
  // @@protoc_insertion_point(field_list:protocol.EntryList.entry)
  return entry_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
EntryList::mutable_entry() {
  // @@protoc_insertion_point(field_mutable_list:protocol.EntryList.entry)
  return &entry_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainHello::kApiListFieldNumber;
const int ChainHello::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainHello::ChainHello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainHello)
}

void ChainHello::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChainHello::ChainHello(const ChainHello& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.ChainHello)
}

void ChainHello::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
}

ChainHello::~ChainHello() {
  // @@protoc_insertion_point(destructor:protocol.ChainHello)
  SharedDtor();
}

void ChainHello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChainHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChainHello_descriptor_;
}

const ChainHello& ChainHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

ChainHello* ChainHello::default_instance_ = NULL;

ChainHello* ChainHello::New(::google::protobuf::Arena* arena) const {
  ChainHello* n = new ChainHello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainHello::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainHello)
  timestamp_ = GOOGLE_LONGLONG(0);
  api_list_.Clear();
}

bool ChainHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainHello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.ChainMessageType api_list = 1;
      case 1: {
        if (tag == 10) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_api_list(static_cast< ::protocol::ChainMessageType >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_api_list(static_cast< ::protocol::ChainMessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainHello)
  return false;
#undef DO_
}

void ChainHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainHello)
  // repeated .protocol.ChainMessageType api_list = 1;
  if (this->api_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_api_list_cached_byte_size_);
  }
  for (int i = 0; i < this->api_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->api_list(i), output);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.ChainHello)
}

::google::protobuf::uint8* ChainHello::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainHello)
  // repeated .protocol.ChainMessageType api_list = 1;
  if (this->api_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _api_list_cached_byte_size_, target);
  }
  for (int i = 0; i < this->api_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->api_list(i), target);
  }

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainHello)
  return target;
}

int ChainHello::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainHello)
  int total_size = 0;

  // optional int64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // repeated .protocol.ChainMessageType api_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->api_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->api_list(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _api_list_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainHello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainHello)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChainHello* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainHello>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainHello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainHello)
    MergeFrom(*source);
  }
}

void ChainHello::MergeFrom(const ChainHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainHello)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  api_list_.MergeFrom(from.api_list_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ChainHello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainHello::CopyFrom(const ChainHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainHello::IsInitialized() const {

  return true;
}

void ChainHello::Swap(ChainHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainHello::InternalSwap(ChainHello* other) {
  api_list_.UnsafeArenaSwap(&other->api_list_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChainHello_descriptor_;
  metadata.reflection = ChainHello_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChainHello

// repeated .protocol.ChainMessageType api_list = 1;
int ChainHello::api_list_size() const {
  return api_list_.size();
}
void ChainHello::clear_api_list() {
  api_list_.Clear();
}
 ::protocol::ChainMessageType ChainHello::api_list(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ChainHello.api_list)
  return static_cast< ::protocol::ChainMessageType >(api_list_.Get(index));
}
 void ChainHello::set_api_list(int index, ::protocol::ChainMessageType value) {
  api_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.ChainHello.api_list)
}
 void ChainHello::add_api_list(::protocol::ChainMessageType value) {
  api_list_.Add(value);
  // @@protoc_insertion_point(field_add:protocol.ChainHello.api_list)
}
 const ::google::protobuf::RepeatedField<int>&
ChainHello::api_list() const {
  // @@protoc_insertion_point(field_list:protocol.ChainHello.api_list)
  return api_list_;
}
 ::google::protobuf::RepeatedField<int>*
ChainHello::mutable_api_list() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ChainHello.api_list)
  return &api_list_;
}

// optional int64 timestamp = 2;
void ChainHello::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChainHello::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.ChainHello.timestamp)
  return timestamp_;
}
 void ChainHello::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainHello.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainStatus::kSelfAddrFieldNumber;
const int ChainStatus::kLedgerVersionFieldNumber;
const int ChainStatus::kMonitorVersionFieldNumber;
const int ChainStatus::kBumoVersionFieldNumber;
const int ChainStatus::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainStatus::ChainStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainStatus)
}

void ChainStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChainStatus::ChainStatus(const ChainStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.ChainStatus)
}

void ChainStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  self_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ledger_version_ = GOOGLE_LONGLONG(0);
  monitor_version_ = GOOGLE_LONGLONG(0);
  bumo_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
}

ChainStatus::~ChainStatus() {
  // @@protoc_insertion_point(destructor:protocol.ChainStatus)
  SharedDtor();
}

void ChainStatus::SharedDtor() {
  self_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bumo_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChainStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChainStatus_descriptor_;
}

const ChainStatus& ChainStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

ChainStatus* ChainStatus::default_instance_ = NULL;

ChainStatus* ChainStatus::New(::google::protobuf::Arena* arena) const {
  ChainStatus* n = new ChainStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChainStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChainStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ledger_version_, monitor_version_);
  self_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bumo_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

}

bool ChainStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string self_addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_self_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->self_addr().data(), this->self_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.ChainStatus.self_addr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ledger_version;
        break;
      }

      // optional int64 ledger_version = 2;
      case 2: {
        if (tag == 16) {
         parse_ledger_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ledger_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_monitor_version;
        break;
      }

      // optional int64 monitor_version = 3;
      case 3: {
        if (tag == 24) {
         parse_monitor_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monitor_version_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bumo_version;
        break;
      }

      // optional string bumo_version = 4;
      case 4: {
        if (tag == 34) {
         parse_bumo_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bumo_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bumo_version().data(), this->bumo_version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.ChainStatus.bumo_version"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainStatus)
  return false;
#undef DO_
}

void ChainStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainStatus)
  // optional string self_addr = 1;
  if (this->self_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->self_addr().data(), this->self_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainStatus.self_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->self_addr(), output);
  }

  // optional int64 ledger_version = 2;
  if (this->ledger_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ledger_version(), output);
  }

  // optional int64 monitor_version = 3;
  if (this->monitor_version() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->monitor_version(), output);
  }

  // optional string bumo_version = 4;
  if (this->bumo_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bumo_version().data(), this->bumo_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainStatus.bumo_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bumo_version(), output);
  }

  // optional int64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.ChainStatus)
}

::google::protobuf::uint8* ChainStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainStatus)
  // optional string self_addr = 1;
  if (this->self_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->self_addr().data(), this->self_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainStatus.self_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->self_addr(), target);
  }

  // optional int64 ledger_version = 2;
  if (this->ledger_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ledger_version(), target);
  }

  // optional int64 monitor_version = 3;
  if (this->monitor_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->monitor_version(), target);
  }

  // optional string bumo_version = 4;
  if (this->bumo_version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bumo_version().data(), this->bumo_version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainStatus.bumo_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bumo_version(), target);
  }

  // optional int64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainStatus)
  return target;
}

int ChainStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainStatus)
  int total_size = 0;

  // optional string self_addr = 1;
  if (this->self_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->self_addr());
  }

  // optional int64 ledger_version = 2;
  if (this->ledger_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ledger_version());
  }

  // optional int64 monitor_version = 3;
  if (this->monitor_version() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->monitor_version());
  }

  // optional string bumo_version = 4;
  if (this->bumo_version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bumo_version());
  }

  // optional int64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChainStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainStatus)
    MergeFrom(*source);
  }
}

void ChainStatus::MergeFrom(const ChainStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.self_addr().size() > 0) {

    self_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.self_addr_);
  }
  if (from.ledger_version() != 0) {
    set_ledger_version(from.ledger_version());
  }
  if (from.monitor_version() != 0) {
    set_monitor_version(from.monitor_version());
  }
  if (from.bumo_version().size() > 0) {

    bumo_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bumo_version_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ChainStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainStatus::CopyFrom(const ChainStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainStatus::IsInitialized() const {

  return true;
}

void ChainStatus::Swap(ChainStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainStatus::InternalSwap(ChainStatus* other) {
  self_addr_.Swap(&other->self_addr_);
  std::swap(ledger_version_, other->ledger_version_);
  std::swap(monitor_version_, other->monitor_version_);
  bumo_version_.Swap(&other->bumo_version_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChainStatus_descriptor_;
  metadata.reflection = ChainStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChainStatus

// optional string self_addr = 1;
void ChainStatus::clear_self_addr() {
  self_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChainStatus::self_addr() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.self_addr)
  return self_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainStatus::set_self_addr(const ::std::string& value) {
  
  self_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.self_addr)
}
 void ChainStatus::set_self_addr(const char* value) {
  
  self_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainStatus.self_addr)
}
 void ChainStatus::set_self_addr(const char* value, size_t size) {
  
  self_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainStatus.self_addr)
}
 ::std::string* ChainStatus::mutable_self_addr() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainStatus.self_addr)
  return self_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChainStatus::release_self_addr() {
  // @@protoc_insertion_point(field_release:protocol.ChainStatus.self_addr)
  
  return self_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainStatus::set_allocated_self_addr(::std::string* self_addr) {
  if (self_addr != NULL) {
    
  } else {
    
  }
  self_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_addr);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainStatus.self_addr)
}

// optional int64 ledger_version = 2;
void ChainStatus::clear_ledger_version() {
  ledger_version_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChainStatus::ledger_version() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.ledger_version)
  return ledger_version_;
}
 void ChainStatus::set_ledger_version(::google::protobuf::int64 value) {
  
  ledger_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.ledger_version)
}

// optional int64 monitor_version = 3;
void ChainStatus::clear_monitor_version() {
  monitor_version_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChainStatus::monitor_version() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.monitor_version)
  return monitor_version_;
}
 void ChainStatus::set_monitor_version(::google::protobuf::int64 value) {
  
  monitor_version_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.monitor_version)
}

// optional string bumo_version = 4;
void ChainStatus::clear_bumo_version() {
  bumo_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChainStatus::bumo_version() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.bumo_version)
  return bumo_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainStatus::set_bumo_version(const ::std::string& value) {
  
  bumo_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.bumo_version)
}
 void ChainStatus::set_bumo_version(const char* value) {
  
  bumo_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainStatus.bumo_version)
}
 void ChainStatus::set_bumo_version(const char* value, size_t size) {
  
  bumo_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainStatus.bumo_version)
}
 ::std::string* ChainStatus::mutable_bumo_version() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainStatus.bumo_version)
  return bumo_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChainStatus::release_bumo_version() {
  // @@protoc_insertion_point(field_release:protocol.ChainStatus.bumo_version)
  
  return bumo_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainStatus::set_allocated_bumo_version(::std::string* bumo_version) {
  if (bumo_version != NULL) {
    
  } else {
    
  }
  bumo_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bumo_version);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainStatus.bumo_version)
}

// optional int64 timestamp = 5;
void ChainStatus::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChainStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.ChainStatus.timestamp)
  return timestamp_;
}
 void ChainStatus::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainStatus.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainPeerMessage::kSrcPeerAddrFieldNumber;
const int ChainPeerMessage::kDesPeerAddrsFieldNumber;
const int ChainPeerMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainPeerMessage::ChainPeerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainPeerMessage)
}

void ChainPeerMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChainPeerMessage::ChainPeerMessage(const ChainPeerMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.ChainPeerMessage)
}

void ChainPeerMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_peer_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChainPeerMessage::~ChainPeerMessage() {
  // @@protoc_insertion_point(destructor:protocol.ChainPeerMessage)
  SharedDtor();
}

void ChainPeerMessage::SharedDtor() {
  src_peer_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChainPeerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainPeerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChainPeerMessage_descriptor_;
}

const ChainPeerMessage& ChainPeerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

ChainPeerMessage* ChainPeerMessage::default_instance_ = NULL;

ChainPeerMessage* ChainPeerMessage::New(::google::protobuf::Arena* arena) const {
  ChainPeerMessage* n = new ChainPeerMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainPeerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainPeerMessage)
  src_peer_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  des_peer_addrs_.Clear();
}

bool ChainPeerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainPeerMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string src_peer_addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_peer_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_peer_addr().data(), this->src_peer_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.ChainPeerMessage.src_peer_addr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_des_peer_addrs;
        break;
      }

      // repeated string des_peer_addrs = 2;
      case 2: {
        if (tag == 18) {
         parse_des_peer_addrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_des_peer_addrs()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->des_peer_addrs(this->des_peer_addrs_size() - 1).data(),
            this->des_peer_addrs(this->des_peer_addrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.ChainPeerMessage.des_peer_addrs"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_des_peer_addrs;
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainPeerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainPeerMessage)
  return false;
#undef DO_
}

void ChainPeerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainPeerMessage)
  // optional string src_peer_addr = 1;
  if (this->src_peer_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_peer_addr().data(), this->src_peer_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainPeerMessage.src_peer_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src_peer_addr(), output);
  }

  // repeated string des_peer_addrs = 2;
  for (int i = 0; i < this->des_peer_addrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->des_peer_addrs(i).data(), this->des_peer_addrs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainPeerMessage.des_peer_addrs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->des_peer_addrs(i), output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.ChainPeerMessage)
}

::google::protobuf::uint8* ChainPeerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainPeerMessage)
  // optional string src_peer_addr = 1;
  if (this->src_peer_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_peer_addr().data(), this->src_peer_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainPeerMessage.src_peer_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src_peer_addr(), target);
  }

  // repeated string des_peer_addrs = 2;
  for (int i = 0; i < this->des_peer_addrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->des_peer_addrs(i).data(), this->des_peer_addrs(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainPeerMessage.des_peer_addrs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->des_peer_addrs(i), target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainPeerMessage)
  return target;
}

int ChainPeerMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainPeerMessage)
  int total_size = 0;

  // optional string src_peer_addr = 1;
  if (this->src_peer_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_peer_addr());
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // repeated string des_peer_addrs = 2;
  total_size += 1 * this->des_peer_addrs_size();
  for (int i = 0; i < this->des_peer_addrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->des_peer_addrs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainPeerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainPeerMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChainPeerMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainPeerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainPeerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainPeerMessage)
    MergeFrom(*source);
  }
}

void ChainPeerMessage::MergeFrom(const ChainPeerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainPeerMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  des_peer_addrs_.MergeFrom(from.des_peer_addrs_);
  if (from.src_peer_addr().size() > 0) {

    src_peer_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_peer_addr_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ChainPeerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainPeerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainPeerMessage::CopyFrom(const ChainPeerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainPeerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainPeerMessage::IsInitialized() const {

  return true;
}

void ChainPeerMessage::Swap(ChainPeerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainPeerMessage::InternalSwap(ChainPeerMessage* other) {
  src_peer_addr_.Swap(&other->src_peer_addr_);
  des_peer_addrs_.UnsafeArenaSwap(&other->des_peer_addrs_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainPeerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChainPeerMessage_descriptor_;
  metadata.reflection = ChainPeerMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChainPeerMessage

// optional string src_peer_addr = 1;
void ChainPeerMessage::clear_src_peer_addr() {
  src_peer_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChainPeerMessage::src_peer_addr() const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerMessage.src_peer_addr)
  return src_peer_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainPeerMessage::set_src_peer_addr(const ::std::string& value) {
  
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainPeerMessage.src_peer_addr)
}
 void ChainPeerMessage::set_src_peer_addr(const char* value) {
  
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainPeerMessage.src_peer_addr)
}
 void ChainPeerMessage::set_src_peer_addr(const char* value, size_t size) {
  
  src_peer_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainPeerMessage.src_peer_addr)
}
 ::std::string* ChainPeerMessage::mutable_src_peer_addr() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainPeerMessage.src_peer_addr)
  return src_peer_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChainPeerMessage::release_src_peer_addr() {
  // @@protoc_insertion_point(field_release:protocol.ChainPeerMessage.src_peer_addr)
  
  return src_peer_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainPeerMessage::set_allocated_src_peer_addr(::std::string* src_peer_addr) {
  if (src_peer_addr != NULL) {
    
  } else {
    
  }
  src_peer_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_peer_addr);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainPeerMessage.src_peer_addr)
}

// repeated string des_peer_addrs = 2;
int ChainPeerMessage::des_peer_addrs_size() const {
  return des_peer_addrs_.size();
}
void ChainPeerMessage::clear_des_peer_addrs() {
  des_peer_addrs_.Clear();
}
 const ::std::string& ChainPeerMessage::des_peer_addrs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerMessage.des_peer_addrs)
  return des_peer_addrs_.Get(index);
}
 ::std::string* ChainPeerMessage::mutable_des_peer_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.ChainPeerMessage.des_peer_addrs)
  return des_peer_addrs_.Mutable(index);
}
 void ChainPeerMessage::set_des_peer_addrs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.ChainPeerMessage.des_peer_addrs)
  des_peer_addrs_.Mutable(index)->assign(value);
}
 void ChainPeerMessage::set_des_peer_addrs(int index, const char* value) {
  des_peer_addrs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.ChainPeerMessage.des_peer_addrs)
}
 void ChainPeerMessage::set_des_peer_addrs(int index, const char* value, size_t size) {
  des_peer_addrs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainPeerMessage.des_peer_addrs)
}
 ::std::string* ChainPeerMessage::add_des_peer_addrs() {
  // @@protoc_insertion_point(field_add_mutable:protocol.ChainPeerMessage.des_peer_addrs)
  return des_peer_addrs_.Add();
}
 void ChainPeerMessage::add_des_peer_addrs(const ::std::string& value) {
  des_peer_addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.ChainPeerMessage.des_peer_addrs)
}
 void ChainPeerMessage::add_des_peer_addrs(const char* value) {
  des_peer_addrs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.ChainPeerMessage.des_peer_addrs)
}
 void ChainPeerMessage::add_des_peer_addrs(const char* value, size_t size) {
  des_peer_addrs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.ChainPeerMessage.des_peer_addrs)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChainPeerMessage::des_peer_addrs() const {
  // @@protoc_insertion_point(field_list:protocol.ChainPeerMessage.des_peer_addrs)
  return des_peer_addrs_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ChainPeerMessage::mutable_des_peer_addrs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ChainPeerMessage.des_peer_addrs)
  return &des_peer_addrs_;
}

// optional bytes data = 3;
void ChainPeerMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChainPeerMessage::data() const {
  // @@protoc_insertion_point(field_get:protocol.ChainPeerMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainPeerMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainPeerMessage.data)
}
 void ChainPeerMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainPeerMessage.data)
}
 void ChainPeerMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainPeerMessage.data)
}
 ::std::string* ChainPeerMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainPeerMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChainPeerMessage::release_data() {
  // @@protoc_insertion_point(field_release:protocol.ChainPeerMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainPeerMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainPeerMessage.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainSubscribeTx::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainSubscribeTx::ChainSubscribeTx()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainSubscribeTx)
}

void ChainSubscribeTx::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChainSubscribeTx::ChainSubscribeTx(const ChainSubscribeTx& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.ChainSubscribeTx)
}

void ChainSubscribeTx::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

ChainSubscribeTx::~ChainSubscribeTx() {
  // @@protoc_insertion_point(destructor:protocol.ChainSubscribeTx)
  SharedDtor();
}

void ChainSubscribeTx::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChainSubscribeTx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainSubscribeTx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChainSubscribeTx_descriptor_;
}

const ChainSubscribeTx& ChainSubscribeTx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

ChainSubscribeTx* ChainSubscribeTx::default_instance_ = NULL;

ChainSubscribeTx* ChainSubscribeTx::New(::google::protobuf::Arena* arena) const {
  ChainSubscribeTx* n = new ChainSubscribeTx;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainSubscribeTx::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainSubscribeTx)
  address_.Clear();
}

bool ChainSubscribeTx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainSubscribeTx)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string address = 1;
      case 1: {
        if (tag == 10) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address(this->address_size() - 1).data(),
            this->address(this->address_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.ChainSubscribeTx.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_address;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainSubscribeTx)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainSubscribeTx)
  return false;
#undef DO_
}

void ChainSubscribeTx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainSubscribeTx)
  // repeated string address = 1;
  for (int i = 0; i < this->address_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address(i).data(), this->address(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainSubscribeTx.address");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->address(i), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.ChainSubscribeTx)
}

::google::protobuf::uint8* ChainSubscribeTx::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainSubscribeTx)
  // repeated string address = 1;
  for (int i = 0; i < this->address_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address(i).data(), this->address(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainSubscribeTx.address");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->address(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainSubscribeTx)
  return target;
}

int ChainSubscribeTx::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainSubscribeTx)
  int total_size = 0;

  // repeated string address = 1;
  total_size += 1 * this->address_size();
  for (int i = 0; i < this->address_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->address(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainSubscribeTx::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainSubscribeTx)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChainSubscribeTx* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainSubscribeTx>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainSubscribeTx)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainSubscribeTx)
    MergeFrom(*source);
  }
}

void ChainSubscribeTx::MergeFrom(const ChainSubscribeTx& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainSubscribeTx)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  address_.MergeFrom(from.address_);
}

void ChainSubscribeTx::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainSubscribeTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainSubscribeTx::CopyFrom(const ChainSubscribeTx& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainSubscribeTx)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainSubscribeTx::IsInitialized() const {

  return true;
}

void ChainSubscribeTx::Swap(ChainSubscribeTx* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainSubscribeTx::InternalSwap(ChainSubscribeTx* other) {
  address_.UnsafeArenaSwap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainSubscribeTx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChainSubscribeTx_descriptor_;
  metadata.reflection = ChainSubscribeTx_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChainSubscribeTx

// repeated string address = 1;
int ChainSubscribeTx::address_size() const {
  return address_.size();
}
void ChainSubscribeTx::clear_address() {
  address_.Clear();
}
 const ::std::string& ChainSubscribeTx::address(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ChainSubscribeTx.address)
  return address_.Get(index);
}
 ::std::string* ChainSubscribeTx::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.ChainSubscribeTx.address)
  return address_.Mutable(index);
}
 void ChainSubscribeTx::set_address(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.ChainSubscribeTx.address)
  address_.Mutable(index)->assign(value);
}
 void ChainSubscribeTx::set_address(int index, const char* value) {
  address_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.ChainSubscribeTx.address)
}
 void ChainSubscribeTx::set_address(int index, const char* value, size_t size) {
  address_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainSubscribeTx.address)
}
 ::std::string* ChainSubscribeTx::add_address() {
  // @@protoc_insertion_point(field_add_mutable:protocol.ChainSubscribeTx.address)
  return address_.Add();
}
 void ChainSubscribeTx::add_address(const ::std::string& value) {
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.ChainSubscribeTx.address)
}
 void ChainSubscribeTx::add_address(const char* value) {
  address_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.ChainSubscribeTx.address)
}
 void ChainSubscribeTx::add_address(const char* value, size_t size) {
  address_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.ChainSubscribeTx.address)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChainSubscribeTx::address() const {
  // @@protoc_insertion_point(field_list:protocol.ChainSubscribeTx.address)
  return address_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ChainSubscribeTx::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ChainSubscribeTx.address)
  return &address_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainResponse::kErrorCodeFieldNumber;
const int ChainResponse::kErrorDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainResponse::ChainResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainResponse)
}

void ChainResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChainResponse::ChainResponse(const ChainResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.ChainResponse)
}

void ChainResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  error_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChainResponse::~ChainResponse() {
  // @@protoc_insertion_point(destructor:protocol.ChainResponse)
  SharedDtor();
}

void ChainResponse::SharedDtor() {
  error_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChainResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChainResponse_descriptor_;
}

const ChainResponse& ChainResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

ChainResponse* ChainResponse::default_instance_ = NULL;

ChainResponse* ChainResponse::New(::google::protobuf::Arena* arena) const {
  ChainResponse* n = new ChainResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainResponse)
  error_code_ = 0;
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChainResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_desc;
        break;
      }

      // optional string error_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_error_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_desc().data(), this->error_desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.ChainResponse.error_desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainResponse)
  return false;
#undef DO_
}

void ChainResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainResponse)
  // optional int32 error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainResponse.error_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_desc(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.ChainResponse)
}

::google::protobuf::uint8* ChainResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainResponse)
  // optional int32 error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainResponse.error_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_desc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainResponse)
  return target;
}

int ChainResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainResponse)
  int total_size = 0;

  // optional int32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_desc());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChainResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainResponse)
    MergeFrom(*source);
  }
}

void ChainResponse::MergeFrom(const ChainResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_desc().size() > 0) {

    error_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_desc_);
  }
}

void ChainResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainResponse::CopyFrom(const ChainResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainResponse::IsInitialized() const {

  return true;
}

void ChainResponse::Swap(ChainResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainResponse::InternalSwap(ChainResponse* other) {
  std::swap(error_code_, other->error_code_);
  error_desc_.Swap(&other->error_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChainResponse_descriptor_;
  metadata.reflection = ChainResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChainResponse

// optional int32 error_code = 1;
void ChainResponse::clear_error_code() {
  error_code_ = 0;
}
 ::google::protobuf::int32 ChainResponse::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.ChainResponse.error_code)
  return error_code_;
}
 void ChainResponse::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainResponse.error_code)
}

// optional string error_desc = 2;
void ChainResponse::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChainResponse::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.ChainResponse.error_desc)
  return error_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainResponse::set_error_desc(const ::std::string& value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainResponse.error_desc)
}
 void ChainResponse::set_error_desc(const char* value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainResponse.error_desc)
}
 void ChainResponse::set_error_desc(const char* value, size_t size) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainResponse.error_desc)
}
 ::std::string* ChainResponse::mutable_error_desc() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainResponse.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChainResponse::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.ChainResponse.error_desc)
  
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainResponse::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    
  } else {
    
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainResponse.error_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ChainTxStatus_TxStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChainTxStatus_TxStatus_descriptor_;
}
bool ChainTxStatus_TxStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChainTxStatus_TxStatus ChainTxStatus::UNDEFINED;
const ChainTxStatus_TxStatus ChainTxStatus::CONFIRMED;
const ChainTxStatus_TxStatus ChainTxStatus::PENDING;
const ChainTxStatus_TxStatus ChainTxStatus::COMPLETE;
const ChainTxStatus_TxStatus ChainTxStatus::FAILURE;
const ChainTxStatus_TxStatus ChainTxStatus::TxStatus_MIN;
const ChainTxStatus_TxStatus ChainTxStatus::TxStatus_MAX;
const int ChainTxStatus::TxStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChainTxStatus::kStatusFieldNumber;
const int ChainTxStatus::kTxHashFieldNumber;
const int ChainTxStatus::kSourceAddressFieldNumber;
const int ChainTxStatus::kSourceAccountSeqFieldNumber;
const int ChainTxStatus::kLedgerSeqFieldNumber;
const int ChainTxStatus::kNewAccountSeqFieldNumber;
const int ChainTxStatus::kErrorCodeFieldNumber;
const int ChainTxStatus::kErrorDescFieldNumber;
const int ChainTxStatus::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChainTxStatus::ChainTxStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainTxStatus)
}

void ChainTxStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChainTxStatus::ChainTxStatus(const ChainTxStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.ChainTxStatus)
}

void ChainTxStatus::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_account_seq_ = GOOGLE_LONGLONG(0);
  ledger_seq_ = GOOGLE_LONGLONG(0);
  new_account_seq_ = GOOGLE_LONGLONG(0);
  error_code_ = 0;
  error_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
}

ChainTxStatus::~ChainTxStatus() {
  // @@protoc_insertion_point(destructor:protocol.ChainTxStatus)
  SharedDtor();
}

void ChainTxStatus::SharedDtor() {
  tx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChainTxStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChainTxStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChainTxStatus_descriptor_;
}

const ChainTxStatus& ChainTxStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

ChainTxStatus* ChainTxStatus::default_instance_ = NULL;

ChainTxStatus* ChainTxStatus::New(::google::protobuf::Arena* arena) const {
  ChainTxStatus* n = new ChainTxStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChainTxStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainTxStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChainTxStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChainTxStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(source_account_seq_, new_account_seq_);
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

}

bool ChainTxStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainTxStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.ChainTxStatus.TxStatus status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::protocol::ChainTxStatus_TxStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tx_hash;
        break;
      }

      // optional string tx_hash = 2;
      case 2: {
        if (tag == 18) {
         parse_tx_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_hash()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tx_hash().data(), this->tx_hash().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.ChainTxStatus.tx_hash"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_source_address;
        break;
      }

      // optional string source_address = 3;
      case 3: {
        if (tag == 26) {
         parse_source_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_address().data(), this->source_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.ChainTxStatus.source_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_source_account_seq;
        break;
      }

      // optional int64 source_account_seq = 4;
      case 4: {
        if (tag == 32) {
         parse_source_account_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &source_account_seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ledger_seq;
        break;
      }

      // optional int64 ledger_seq = 5;
      case 5: {
        if (tag == 40) {
         parse_ledger_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ledger_seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_new_account_seq;
        break;
      }

      // optional int64 new_account_seq = 6;
      case 6: {
        if (tag == 48) {
         parse_new_account_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_account_seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_error_code;
        break;
      }

      // optional .protocol.ERRORCODE error_code = 7;
      case 7: {
        if (tag == 56) {
         parse_error_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::protocol::ERRORCODE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_error_desc;
        break;
      }

      // optional string error_desc = 8;
      case 8: {
        if (tag == 66) {
         parse_error_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_desc().data(), this->error_desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.ChainTxStatus.error_desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 9;
      case 9: {
        if (tag == 72) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainTxStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainTxStatus)
  return false;
#undef DO_
}

void ChainTxStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainTxStatus)
  // optional .protocol.ChainTxStatus.TxStatus status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string tx_hash = 2;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainTxStatus.tx_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tx_hash(), output);
  }

  // optional string source_address = 3;
  if (this->source_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_address().data(), this->source_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainTxStatus.source_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_address(), output);
  }

  // optional int64 source_account_seq = 4;
  if (this->source_account_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->source_account_seq(), output);
  }

  // optional int64 ledger_seq = 5;
  if (this->ledger_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->ledger_seq(), output);
  }

  // optional int64 new_account_seq = 6;
  if (this->new_account_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->new_account_seq(), output);
  }

  // optional .protocol.ERRORCODE error_code = 7;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->error_code(), output);
  }

  // optional string error_desc = 8;
  if (this->error_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainTxStatus.error_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->error_desc(), output);
  }

  // optional int64 timestamp = 9;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.ChainTxStatus)
}

::google::protobuf::uint8* ChainTxStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainTxStatus)
  // optional .protocol.ChainTxStatus.TxStatus status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string tx_hash = 2;
  if (this->tx_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), this->tx_hash().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainTxStatus.tx_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tx_hash(), target);
  }

  // optional string source_address = 3;
  if (this->source_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_address().data(), this->source_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainTxStatus.source_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->source_address(), target);
  }

  // optional int64 source_account_seq = 4;
  if (this->source_account_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->source_account_seq(), target);
  }

  // optional int64 ledger_seq = 5;
  if (this->ledger_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->ledger_seq(), target);
  }

  // optional int64 new_account_seq = 6;
  if (this->new_account_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->new_account_seq(), target);
  }

  // optional .protocol.ERRORCODE error_code = 7;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->error_code(), target);
  }

  // optional string error_desc = 8;
  if (this->error_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainTxStatus.error_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->error_desc(), target);
  }

  // optional int64 timestamp = 9;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainTxStatus)
  return target;
}

int ChainTxStatus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainTxStatus)
  int total_size = 0;

  // optional .protocol.ChainTxStatus.TxStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional string tx_hash = 2;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tx_hash());
  }

  // optional string source_address = 3;
  if (this->source_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_address());
  }

  // optional int64 source_account_seq = 4;
  if (this->source_account_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->source_account_seq());
  }

  // optional int64 ledger_seq = 5;
  if (this->ledger_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ledger_seq());
  }

  // optional int64 new_account_seq = 6;
  if (this->new_account_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_account_seq());
  }

  // optional .protocol.ERRORCODE error_code = 7;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // optional string error_desc = 8;
  if (this->error_desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_desc());
  }

  // optional int64 timestamp = 9;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChainTxStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainTxStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChainTxStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChainTxStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainTxStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainTxStatus)
    MergeFrom(*source);
  }
}

void ChainTxStatus::MergeFrom(const ChainTxStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainTxStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.tx_hash().size() > 0) {

    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  if (from.source_address().size() > 0) {

    source_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_address_);
  }
  if (from.source_account_seq() != 0) {
    set_source_account_seq(from.source_account_seq());
  }
  if (from.ledger_seq() != 0) {
    set_ledger_seq(from.ledger_seq());
  }
  if (from.new_account_seq() != 0) {
    set_new_account_seq(from.new_account_seq());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_desc().size() > 0) {

    error_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_desc_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void ChainTxStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainTxStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainTxStatus::CopyFrom(const ChainTxStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainTxStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainTxStatus::IsInitialized() const {

  return true;
}

void ChainTxStatus::Swap(ChainTxStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChainTxStatus::InternalSwap(ChainTxStatus* other) {
  std::swap(status_, other->status_);
  tx_hash_.Swap(&other->tx_hash_);
  source_address_.Swap(&other->source_address_);
  std::swap(source_account_seq_, other->source_account_seq_);
  std::swap(ledger_seq_, other->ledger_seq_);
  std::swap(new_account_seq_, other->new_account_seq_);
  std::swap(error_code_, other->error_code_);
  error_desc_.Swap(&other->error_desc_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChainTxStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChainTxStatus_descriptor_;
  metadata.reflection = ChainTxStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChainTxStatus

// optional .protocol.ChainTxStatus.TxStatus status = 1;
void ChainTxStatus::clear_status() {
  status_ = 0;
}
 ::protocol::ChainTxStatus_TxStatus ChainTxStatus::status() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.status)
  return static_cast< ::protocol::ChainTxStatus_TxStatus >(status_);
}
 void ChainTxStatus::set_status(::protocol::ChainTxStatus_TxStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.status)
}

// optional string tx_hash = 2;
void ChainTxStatus::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChainTxStatus::tx_hash() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.tx_hash)
  return tx_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainTxStatus::set_tx_hash(const ::std::string& value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.tx_hash)
}
 void ChainTxStatus::set_tx_hash(const char* value) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainTxStatus.tx_hash)
}
 void ChainTxStatus::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainTxStatus.tx_hash)
}
 ::std::string* ChainTxStatus::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainTxStatus.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChainTxStatus::release_tx_hash() {
  // @@protoc_insertion_point(field_release:protocol.ChainTxStatus.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainTxStatus::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainTxStatus.tx_hash)
}

// optional string source_address = 3;
void ChainTxStatus::clear_source_address() {
  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChainTxStatus::source_address() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.source_address)
  return source_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainTxStatus::set_source_address(const ::std::string& value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.source_address)
}
 void ChainTxStatus::set_source_address(const char* value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainTxStatus.source_address)
}
 void ChainTxStatus::set_source_address(const char* value, size_t size) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainTxStatus.source_address)
}
 ::std::string* ChainTxStatus::mutable_source_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainTxStatus.source_address)
  return source_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChainTxStatus::release_source_address() {
  // @@protoc_insertion_point(field_release:protocol.ChainTxStatus.source_address)
  
  return source_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainTxStatus::set_allocated_source_address(::std::string* source_address) {
  if (source_address != NULL) {
    
  } else {
    
  }
  source_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainTxStatus.source_address)
}

// optional int64 source_account_seq = 4;
void ChainTxStatus::clear_source_account_seq() {
  source_account_seq_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChainTxStatus::source_account_seq() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.source_account_seq)
  return source_account_seq_;
}
 void ChainTxStatus::set_source_account_seq(::google::protobuf::int64 value) {
  
  source_account_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.source_account_seq)
}

// optional int64 ledger_seq = 5;
void ChainTxStatus::clear_ledger_seq() {
  ledger_seq_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChainTxStatus::ledger_seq() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.ledger_seq)
  return ledger_seq_;
}
 void ChainTxStatus::set_ledger_seq(::google::protobuf::int64 value) {
  
  ledger_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.ledger_seq)
}

// optional int64 new_account_seq = 6;
void ChainTxStatus::clear_new_account_seq() {
  new_account_seq_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChainTxStatus::new_account_seq() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.new_account_seq)
  return new_account_seq_;
}
 void ChainTxStatus::set_new_account_seq(::google::protobuf::int64 value) {
  
  new_account_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.new_account_seq)
}

// optional .protocol.ERRORCODE error_code = 7;
void ChainTxStatus::clear_error_code() {
  error_code_ = 0;
}
 ::protocol::ERRORCODE ChainTxStatus::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.error_code)
  return static_cast< ::protocol::ERRORCODE >(error_code_);
}
 void ChainTxStatus::set_error_code(::protocol::ERRORCODE value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.error_code)
}

// optional string error_desc = 8;
void ChainTxStatus::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChainTxStatus::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.error_desc)
  return error_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainTxStatus::set_error_desc(const ::std::string& value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.error_desc)
}
 void ChainTxStatus::set_error_desc(const char* value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainTxStatus.error_desc)
}
 void ChainTxStatus::set_error_desc(const char* value, size_t size) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainTxStatus.error_desc)
}
 ::std::string* ChainTxStatus::mutable_error_desc() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainTxStatus.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChainTxStatus::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.ChainTxStatus.error_desc)
  
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChainTxStatus::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    
  } else {
    
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainTxStatus.error_desc)
}

// optional int64 timestamp = 9;
void ChainTxStatus::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ChainTxStatus::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.ChainTxStatus.timestamp)
  return timestamp_;
}
 void ChainTxStatus::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainTxStatus.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageChannelQueryDeposit::kChainIdFieldNumber;
const int MessageChannelQueryDeposit::kSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageChannelQueryDeposit::MessageChannelQueryDeposit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MessageChannelQueryDeposit)
}

void MessageChannelQueryDeposit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessageChannelQueryDeposit::MessageChannelQueryDeposit(const MessageChannelQueryDeposit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.MessageChannelQueryDeposit)
}

void MessageChannelQueryDeposit::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  chain_id_ = GOOGLE_LONGLONG(0);
  seq_ = GOOGLE_LONGLONG(0);
}

MessageChannelQueryDeposit::~MessageChannelQueryDeposit() {
  // @@protoc_insertion_point(destructor:protocol.MessageChannelQueryDeposit)
  SharedDtor();
}

void MessageChannelQueryDeposit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageChannelQueryDeposit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageChannelQueryDeposit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageChannelQueryDeposit_descriptor_;
}

const MessageChannelQueryDeposit& MessageChannelQueryDeposit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

MessageChannelQueryDeposit* MessageChannelQueryDeposit::default_instance_ = NULL;

MessageChannelQueryDeposit* MessageChannelQueryDeposit::New(::google::protobuf::Arena* arena) const {
  MessageChannelQueryDeposit* n = new MessageChannelQueryDeposit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageChannelQueryDeposit::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MessageChannelQueryDeposit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MessageChannelQueryDeposit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MessageChannelQueryDeposit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(chain_id_, seq_);

#undef ZR_HELPER_
#undef ZR_

}

bool MessageChannelQueryDeposit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MessageChannelQueryDeposit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 chain_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chain_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // optional int64 seq = 2;
      case 2: {
        if (tag == 16) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MessageChannelQueryDeposit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MessageChannelQueryDeposit)
  return false;
#undef DO_
}

void MessageChannelQueryDeposit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MessageChannelQueryDeposit)
  // optional int64 chain_id = 1;
  if (this->chain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->chain_id(), output);
  }

  // optional int64 seq = 2;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->seq(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.MessageChannelQueryDeposit)
}

::google::protobuf::uint8* MessageChannelQueryDeposit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MessageChannelQueryDeposit)
  // optional int64 chain_id = 1;
  if (this->chain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->chain_id(), target);
  }

  // optional int64 seq = 2;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->seq(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.MessageChannelQueryDeposit)
  return target;
}

int MessageChannelQueryDeposit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MessageChannelQueryDeposit)
  int total_size = 0;

  // optional int64 chain_id = 1;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chain_id());
  }

  // optional int64 seq = 2;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seq());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageChannelQueryDeposit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MessageChannelQueryDeposit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageChannelQueryDeposit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageChannelQueryDeposit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MessageChannelQueryDeposit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MessageChannelQueryDeposit)
    MergeFrom(*source);
  }
}

void MessageChannelQueryDeposit::MergeFrom(const MessageChannelQueryDeposit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MessageChannelQueryDeposit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.chain_id() != 0) {
    set_chain_id(from.chain_id());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
}

void MessageChannelQueryDeposit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MessageChannelQueryDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageChannelQueryDeposit::CopyFrom(const MessageChannelQueryDeposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MessageChannelQueryDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageChannelQueryDeposit::IsInitialized() const {

  return true;
}

void MessageChannelQueryDeposit::Swap(MessageChannelQueryDeposit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageChannelQueryDeposit::InternalSwap(MessageChannelQueryDeposit* other) {
  std::swap(chain_id_, other->chain_id_);
  std::swap(seq_, other->seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageChannelQueryDeposit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageChannelQueryDeposit_descriptor_;
  metadata.reflection = MessageChannelQueryDeposit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageChannelQueryDeposit

// optional int64 chain_id = 1;
void MessageChannelQueryDeposit::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannelQueryDeposit::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQueryDeposit.chain_id)
  return chain_id_;
}
 void MessageChannelQueryDeposit::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQueryDeposit.chain_id)
}

// optional int64 seq = 2;
void MessageChannelQueryDeposit::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannelQueryDeposit::seq() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQueryDeposit.seq)
  return seq_;
}
 void MessageChannelQueryDeposit::set_seq(::google::protobuf::int64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQueryDeposit.seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageChannelHello::kNetworkIdFieldNumber;
const int MessageChannelHello::kNodeAddressFieldNumber;
const int MessageChannelHello::kChainIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageChannelHello::MessageChannelHello()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MessageChannelHello)
}

void MessageChannelHello::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessageChannelHello::MessageChannelHello(const MessageChannelHello& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.MessageChannelHello)
}

void MessageChannelHello::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  network_id_ = GOOGLE_LONGLONG(0);
  node_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_ = GOOGLE_LONGLONG(0);
}

MessageChannelHello::~MessageChannelHello() {
  // @@protoc_insertion_point(destructor:protocol.MessageChannelHello)
  SharedDtor();
}

void MessageChannelHello::SharedDtor() {
  node_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MessageChannelHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageChannelHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageChannelHello_descriptor_;
}

const MessageChannelHello& MessageChannelHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

MessageChannelHello* MessageChannelHello::default_instance_ = NULL;

MessageChannelHello* MessageChannelHello::New(::google::protobuf::Arena* arena) const {
  MessageChannelHello* n = new MessageChannelHello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageChannelHello::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MessageChannelHello)
  network_id_ = GOOGLE_LONGLONG(0);
  node_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_ = GOOGLE_LONGLONG(0);
}

bool MessageChannelHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MessageChannelHello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 network_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &network_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_address;
        break;
      }

      // optional string node_address = 3;
      case 3: {
        if (tag == 26) {
         parse_node_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->node_address().data(), this->node_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.MessageChannelHello.node_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chain_id;
        break;
      }

      // optional int64 chain_id = 4;
      case 4: {
        if (tag == 32) {
         parse_chain_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chain_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MessageChannelHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MessageChannelHello)
  return false;
#undef DO_
}

void MessageChannelHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MessageChannelHello)
  // optional int64 network_id = 1;
  if (this->network_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->network_id(), output);
  }

  // optional string node_address = 3;
  if (this->node_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_address().data(), this->node_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelHello.node_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->node_address(), output);
  }

  // optional int64 chain_id = 4;
  if (this->chain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->chain_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.MessageChannelHello)
}

::google::protobuf::uint8* MessageChannelHello::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MessageChannelHello)
  // optional int64 network_id = 1;
  if (this->network_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->network_id(), target);
  }

  // optional string node_address = 3;
  if (this->node_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->node_address().data(), this->node_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelHello.node_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node_address(), target);
  }

  // optional int64 chain_id = 4;
  if (this->chain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->chain_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.MessageChannelHello)
  return target;
}

int MessageChannelHello::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MessageChannelHello)
  int total_size = 0;

  // optional int64 network_id = 1;
  if (this->network_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->network_id());
  }

  // optional string node_address = 3;
  if (this->node_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->node_address());
  }

  // optional int64 chain_id = 4;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chain_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageChannelHello::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MessageChannelHello)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageChannelHello* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageChannelHello>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MessageChannelHello)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MessageChannelHello)
    MergeFrom(*source);
  }
}

void MessageChannelHello::MergeFrom(const MessageChannelHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MessageChannelHello)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.network_id() != 0) {
    set_network_id(from.network_id());
  }
  if (from.node_address().size() > 0) {

    node_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_address_);
  }
  if (from.chain_id() != 0) {
    set_chain_id(from.chain_id());
  }
}

void MessageChannelHello::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MessageChannelHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageChannelHello::CopyFrom(const MessageChannelHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MessageChannelHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageChannelHello::IsInitialized() const {

  return true;
}

void MessageChannelHello::Swap(MessageChannelHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageChannelHello::InternalSwap(MessageChannelHello* other) {
  std::swap(network_id_, other->network_id_);
  node_address_.Swap(&other->node_address_);
  std::swap(chain_id_, other->chain_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageChannelHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageChannelHello_descriptor_;
  metadata.reflection = MessageChannelHello_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageChannelHello

// optional int64 network_id = 1;
void MessageChannelHello::clear_network_id() {
  network_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannelHello::network_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHello.network_id)
  return network_id_;
}
 void MessageChannelHello::set_network_id(::google::protobuf::int64 value) {
  
  network_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelHello.network_id)
}

// optional string node_address = 3;
void MessageChannelHello::clear_node_address() {
  node_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelHello::node_address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHello.node_address)
  return node_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelHello::set_node_address(const ::std::string& value) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelHello.node_address)
}
 void MessageChannelHello::set_node_address(const char* value) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelHello.node_address)
}
 void MessageChannelHello::set_node_address(const char* value, size_t size) {
  
  node_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelHello.node_address)
}
 ::std::string* MessageChannelHello::mutable_node_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelHello.node_address)
  return node_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelHello::release_node_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelHello.node_address)
  
  return node_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelHello::set_allocated_node_address(::std::string* node_address) {
  if (node_address != NULL) {
    
  } else {
    
  }
  node_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelHello.node_address)
}

// optional int64 chain_id = 4;
void MessageChannelHello::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannelHello::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHello.chain_id)
  return chain_id_;
}
 void MessageChannelHello::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelHello.chain_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageChannelHelloResponse::kErrorCodeFieldNumber;
const int MessageChannelHelloResponse::kErrorDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageChannelHelloResponse::MessageChannelHelloResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MessageChannelHelloResponse)
}

void MessageChannelHelloResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessageChannelHelloResponse::MessageChannelHelloResponse(const MessageChannelHelloResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.MessageChannelHelloResponse)
}

void MessageChannelHelloResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  error_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MessageChannelHelloResponse::~MessageChannelHelloResponse() {
  // @@protoc_insertion_point(destructor:protocol.MessageChannelHelloResponse)
  SharedDtor();
}

void MessageChannelHelloResponse::SharedDtor() {
  error_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MessageChannelHelloResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageChannelHelloResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageChannelHelloResponse_descriptor_;
}

const MessageChannelHelloResponse& MessageChannelHelloResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

MessageChannelHelloResponse* MessageChannelHelloResponse::default_instance_ = NULL;

MessageChannelHelloResponse* MessageChannelHelloResponse::New(::google::protobuf::Arena* arena) const {
  MessageChannelHelloResponse* n = new MessageChannelHelloResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageChannelHelloResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MessageChannelHelloResponse)
  error_code_ = 0;
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MessageChannelHelloResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MessageChannelHelloResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.ERRORCODE error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::protocol::ERRORCODE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_desc;
        break;
      }

      // optional string error_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_error_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_desc().data(), this->error_desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.MessageChannelHelloResponse.error_desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MessageChannelHelloResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MessageChannelHelloResponse)
  return false;
#undef DO_
}

void MessageChannelHelloResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MessageChannelHelloResponse)
  // optional .protocol.ERRORCODE error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelHelloResponse.error_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_desc(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.MessageChannelHelloResponse)
}

::google::protobuf::uint8* MessageChannelHelloResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MessageChannelHelloResponse)
  // optional .protocol.ERRORCODE error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelHelloResponse.error_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_desc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.MessageChannelHelloResponse)
  return target;
}

int MessageChannelHelloResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MessageChannelHelloResponse)
  int total_size = 0;

  // optional .protocol.ERRORCODE error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_desc());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageChannelHelloResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MessageChannelHelloResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageChannelHelloResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageChannelHelloResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MessageChannelHelloResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MessageChannelHelloResponse)
    MergeFrom(*source);
  }
}

void MessageChannelHelloResponse::MergeFrom(const MessageChannelHelloResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MessageChannelHelloResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_desc().size() > 0) {

    error_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_desc_);
  }
}

void MessageChannelHelloResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MessageChannelHelloResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageChannelHelloResponse::CopyFrom(const MessageChannelHelloResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MessageChannelHelloResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageChannelHelloResponse::IsInitialized() const {

  return true;
}

void MessageChannelHelloResponse::Swap(MessageChannelHelloResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageChannelHelloResponse::InternalSwap(MessageChannelHelloResponse* other) {
  std::swap(error_code_, other->error_code_);
  error_desc_.Swap(&other->error_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageChannelHelloResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageChannelHelloResponse_descriptor_;
  metadata.reflection = MessageChannelHelloResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageChannelHelloResponse

// optional .protocol.ERRORCODE error_code = 1;
void MessageChannelHelloResponse::clear_error_code() {
  error_code_ = 0;
}
 ::protocol::ERRORCODE MessageChannelHelloResponse::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHelloResponse.error_code)
  return static_cast< ::protocol::ERRORCODE >(error_code_);
}
 void MessageChannelHelloResponse::set_error_code(::protocol::ERRORCODE value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelHelloResponse.error_code)
}

// optional string error_desc = 2;
void MessageChannelHelloResponse::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelHelloResponse::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelHelloResponse.error_desc)
  return error_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelHelloResponse::set_error_desc(const ::std::string& value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelHelloResponse.error_desc)
}
 void MessageChannelHelloResponse::set_error_desc(const char* value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelHelloResponse.error_desc)
}
 void MessageChannelHelloResponse::set_error_desc(const char* value, size_t size) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelHelloResponse.error_desc)
}
 ::std::string* MessageChannelHelloResponse::mutable_error_desc() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelHelloResponse.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelHelloResponse::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelHelloResponse.error_desc)
  
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelHelloResponse::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    
  } else {
    
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelHelloResponse.error_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageChannel::kTargetChainIdFieldNumber;
const int MessageChannel::kMsgTypeFieldNumber;
const int MessageChannel::kMsgDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageChannel::MessageChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MessageChannel)
}

void MessageChannel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessageChannel::MessageChannel(const MessageChannel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.MessageChannel)
}

void MessageChannel::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  target_chain_id_ = GOOGLE_LONGLONG(0);
  msg_type_ = 0;
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MessageChannel::~MessageChannel() {
  // @@protoc_insertion_point(destructor:protocol.MessageChannel)
  SharedDtor();
}

void MessageChannel::SharedDtor() {
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MessageChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageChannel_descriptor_;
}

const MessageChannel& MessageChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

MessageChannel* MessageChannel::default_instance_ = NULL;

MessageChannel* MessageChannel::New(::google::protobuf::Arena* arena) const {
  MessageChannel* n = new MessageChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MessageChannel)
  target_chain_id_ = GOOGLE_LONGLONG(0);
  msg_type_ = 0;
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MessageChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MessageChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 target_chain_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_chain_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_type;
        break;
      }

      // optional .protocol.MESSAGE_CHANNEL_TYPE msg_type = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msg_type(static_cast< ::protocol::MESSAGE_CHANNEL_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg_data;
        break;
      }

      // optional bytes msg_data = 3;
      case 3: {
        if (tag == 26) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MessageChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MessageChannel)
  return false;
#undef DO_
}

void MessageChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MessageChannel)
  // optional int64 target_chain_id = 1;
  if (this->target_chain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->target_chain_id(), output);
  }

  // optional .protocol.MESSAGE_CHANNEL_TYPE msg_type = 2;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msg_type(), output);
  }

  // optional bytes msg_data = 3;
  if (this->msg_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->msg_data(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.MessageChannel)
}

::google::protobuf::uint8* MessageChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MessageChannel)
  // optional int64 target_chain_id = 1;
  if (this->target_chain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->target_chain_id(), target);
  }

  // optional .protocol.MESSAGE_CHANNEL_TYPE msg_type = 2;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msg_type(), target);
  }

  // optional bytes msg_data = 3;
  if (this->msg_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg_data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.MessageChannel)
  return target;
}

int MessageChannel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MessageChannel)
  int total_size = 0;

  // optional int64 target_chain_id = 1;
  if (this->target_chain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_chain_id());
  }

  // optional .protocol.MESSAGE_CHANNEL_TYPE msg_type = 2;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
  }

  // optional bytes msg_data = 3;
  if (this->msg_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MessageChannel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageChannel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MessageChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MessageChannel)
    MergeFrom(*source);
  }
}

void MessageChannel::MergeFrom(const MessageChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MessageChannel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.target_chain_id() != 0) {
    set_target_chain_id(from.target_chain_id());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.msg_data().size() > 0) {

    msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
  }
}

void MessageChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MessageChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageChannel::CopyFrom(const MessageChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MessageChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageChannel::IsInitialized() const {

  return true;
}

void MessageChannel::Swap(MessageChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageChannel::InternalSwap(MessageChannel* other) {
  std::swap(target_chain_id_, other->target_chain_id_);
  std::swap(msg_type_, other->msg_type_);
  msg_data_.Swap(&other->msg_data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageChannel_descriptor_;
  metadata.reflection = MessageChannel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageChannel

// optional int64 target_chain_id = 1;
void MessageChannel::clear_target_chain_id() {
  target_chain_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannel::target_chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannel.target_chain_id)
  return target_chain_id_;
}
 void MessageChannel::set_target_chain_id(::google::protobuf::int64 value) {
  
  target_chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannel.target_chain_id)
}

// optional .protocol.MESSAGE_CHANNEL_TYPE msg_type = 2;
void MessageChannel::clear_msg_type() {
  msg_type_ = 0;
}
 ::protocol::MESSAGE_CHANNEL_TYPE MessageChannel::msg_type() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannel.msg_type)
  return static_cast< ::protocol::MESSAGE_CHANNEL_TYPE >(msg_type_);
}
 void MessageChannel::set_msg_type(::protocol::MESSAGE_CHANNEL_TYPE value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannel.msg_type)
}

// optional bytes msg_data = 3;
void MessageChannel::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannel::msg_data() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannel.msg_data)
  return msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannel::set_msg_data(const ::std::string& value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannel.msg_data)
}
 void MessageChannel::set_msg_data(const char* value) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannel.msg_data)
}
 void MessageChannel::set_msg_data(const void* value, size_t size) {
  
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannel.msg_data)
}
 ::std::string* MessageChannel::mutable_msg_data() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannel.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannel::release_msg_data() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannel.msg_data)
  
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannel::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    
  } else {
    
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannel.msg_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageChannelResponse::kErrorCodeFieldNumber;
const int MessageChannelResponse::kErrorDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageChannelResponse::MessageChannelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MessageChannelResponse)
}

void MessageChannelResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessageChannelResponse::MessageChannelResponse(const MessageChannelResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.MessageChannelResponse)
}

void MessageChannelResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  error_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MessageChannelResponse::~MessageChannelResponse() {
  // @@protoc_insertion_point(destructor:protocol.MessageChannelResponse)
  SharedDtor();
}

void MessageChannelResponse::SharedDtor() {
  error_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MessageChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageChannelResponse_descriptor_;
}

const MessageChannelResponse& MessageChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

MessageChannelResponse* MessageChannelResponse::default_instance_ = NULL;

MessageChannelResponse* MessageChannelResponse::New(::google::protobuf::Arena* arena) const {
  MessageChannelResponse* n = new MessageChannelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MessageChannelResponse)
  error_code_ = 0;
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MessageChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MessageChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.ERRORCODE error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::protocol::ERRORCODE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_desc;
        break;
      }

      // optional string error_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_error_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_desc().data(), this->error_desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.MessageChannelResponse.error_desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MessageChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MessageChannelResponse)
  return false;
#undef DO_
}

void MessageChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MessageChannelResponse)
  // optional .protocol.ERRORCODE error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelResponse.error_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_desc(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.MessageChannelResponse)
}

::google::protobuf::uint8* MessageChannelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MessageChannelResponse)
  // optional .protocol.ERRORCODE error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelResponse.error_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_desc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.MessageChannelResponse)
  return target;
}

int MessageChannelResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MessageChannelResponse)
  int total_size = 0;

  // optional .protocol.ERRORCODE error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_desc());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MessageChannelResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageChannelResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageChannelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MessageChannelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MessageChannelResponse)
    MergeFrom(*source);
  }
}

void MessageChannelResponse::MergeFrom(const MessageChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MessageChannelResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_desc().size() > 0) {

    error_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_desc_);
  }
}

void MessageChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MessageChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageChannelResponse::CopyFrom(const MessageChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MessageChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageChannelResponse::IsInitialized() const {

  return true;
}

void MessageChannelResponse::Swap(MessageChannelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageChannelResponse::InternalSwap(MessageChannelResponse* other) {
  std::swap(error_code_, other->error_code_);
  error_desc_.Swap(&other->error_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageChannelResponse_descriptor_;
  metadata.reflection = MessageChannelResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageChannelResponse

// optional .protocol.ERRORCODE error_code = 1;
void MessageChannelResponse::clear_error_code() {
  error_code_ = 0;
}
 ::protocol::ERRORCODE MessageChannelResponse::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelResponse.error_code)
  return static_cast< ::protocol::ERRORCODE >(error_code_);
}
 void MessageChannelResponse::set_error_code(::protocol::ERRORCODE value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelResponse.error_code)
}

// optional string error_desc = 2;
void MessageChannelResponse::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelResponse::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelResponse.error_desc)
  return error_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelResponse::set_error_desc(const ::std::string& value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelResponse.error_desc)
}
 void MessageChannelResponse::set_error_desc(const char* value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelResponse.error_desc)
}
 void MessageChannelResponse::set_error_desc(const char* value, size_t size) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelResponse.error_desc)
}
 ::std::string* MessageChannelResponse::mutable_error_desc() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelResponse.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelResponse::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelResponse.error_desc)
  
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelResponse::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    
  } else {
    
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelResponse.error_desc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageChannelProposer::kHeaderFieldNumber;
const int MessageChannelProposer::kProposerAddressFieldNumber;
const int MessageChannelProposer::kProposerSignatureFieldNumber;
const int MessageChannelProposer::kHeaderHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageChannelProposer::MessageChannelProposer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MessageChannelProposer)
}

void MessageChannelProposer::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::protocol::LedgerHeader*>(&::protocol::LedgerHeader::default_instance());
}

MessageChannelProposer::MessageChannelProposer(const MessageChannelProposer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.MessageChannelProposer)
}

void MessageChannelProposer::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  proposer_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposer_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MessageChannelProposer::~MessageChannelProposer() {
  // @@protoc_insertion_point(destructor:protocol.MessageChannelProposer)
  SharedDtor();
}

void MessageChannelProposer::SharedDtor() {
  proposer_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposer_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void MessageChannelProposer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageChannelProposer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageChannelProposer_descriptor_;
}

const MessageChannelProposer& MessageChannelProposer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

MessageChannelProposer* MessageChannelProposer::default_instance_ = NULL;

MessageChannelProposer* MessageChannelProposer::New(::google::protobuf::Arena* arena) const {
  MessageChannelProposer* n = new MessageChannelProposer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageChannelProposer::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MessageChannelProposer)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  proposer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  proposer_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MessageChannelProposer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MessageChannelProposer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.LedgerHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_proposer_address;
        break;
      }

      // optional string proposer_address = 2;
      case 2: {
        if (tag == 18) {
         parse_proposer_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proposer_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->proposer_address().data(), this->proposer_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.MessageChannelProposer.proposer_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_proposer_signature;
        break;
      }

      // optional bytes proposer_signature = 3;
      case 3: {
        if (tag == 26) {
         parse_proposer_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proposer_signature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_header_hash;
        break;
      }

      // optional bytes header_hash = 4;
      case 4: {
        if (tag == 34) {
         parse_header_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_header_hash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MessageChannelProposer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MessageChannelProposer)
  return false;
#undef DO_
}

void MessageChannelProposer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MessageChannelProposer)
  // optional .protocol.LedgerHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional string proposer_address = 2;
  if (this->proposer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proposer_address().data(), this->proposer_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelProposer.proposer_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->proposer_address(), output);
  }

  // optional bytes proposer_signature = 3;
  if (this->proposer_signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->proposer_signature(), output);
  }

  // optional bytes header_hash = 4;
  if (this->header_hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->header_hash(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.MessageChannelProposer)
}

::google::protobuf::uint8* MessageChannelProposer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MessageChannelProposer)
  // optional .protocol.LedgerHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional string proposer_address = 2;
  if (this->proposer_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->proposer_address().data(), this->proposer_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelProposer.proposer_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->proposer_address(), target);
  }

  // optional bytes proposer_signature = 3;
  if (this->proposer_signature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->proposer_signature(), target);
  }

  // optional bytes header_hash = 4;
  if (this->header_hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->header_hash(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.MessageChannelProposer)
  return target;
}

int MessageChannelProposer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MessageChannelProposer)
  int total_size = 0;

  // optional .protocol.LedgerHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional string proposer_address = 2;
  if (this->proposer_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->proposer_address());
  }

  // optional bytes proposer_signature = 3;
  if (this->proposer_signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->proposer_signature());
  }

  // optional bytes header_hash = 4;
  if (this->header_hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->header_hash());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageChannelProposer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MessageChannelProposer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageChannelProposer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageChannelProposer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MessageChannelProposer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MessageChannelProposer)
    MergeFrom(*source);
  }
}

void MessageChannelProposer::MergeFrom(const MessageChannelProposer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MessageChannelProposer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_header()) {
    mutable_header()->::protocol::LedgerHeader::MergeFrom(from.header());
  }
  if (from.proposer_address().size() > 0) {

    proposer_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_address_);
  }
  if (from.proposer_signature().size() > 0) {

    proposer_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proposer_signature_);
  }
  if (from.header_hash().size() > 0) {

    header_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.header_hash_);
  }
}

void MessageChannelProposer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MessageChannelProposer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageChannelProposer::CopyFrom(const MessageChannelProposer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MessageChannelProposer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageChannelProposer::IsInitialized() const {

  return true;
}

void MessageChannelProposer::Swap(MessageChannelProposer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageChannelProposer::InternalSwap(MessageChannelProposer* other) {
  std::swap(header_, other->header_);
  proposer_address_.Swap(&other->proposer_address_);
  proposer_signature_.Swap(&other->proposer_signature_);
  header_hash_.Swap(&other->header_hash_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageChannelProposer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageChannelProposer_descriptor_;
  metadata.reflection = MessageChannelProposer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageChannelProposer

// optional .protocol.LedgerHeader header = 1;
bool MessageChannelProposer::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void MessageChannelProposer::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::protocol::LedgerHeader& MessageChannelProposer::header() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelProposer.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::protocol::LedgerHeader* MessageChannelProposer::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::protocol::LedgerHeader;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelProposer.header)
  return header_;
}
::protocol::LedgerHeader* MessageChannelProposer::release_header() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelProposer.header)
  
  ::protocol::LedgerHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void MessageChannelProposer::set_allocated_header(::protocol::LedgerHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelProposer.header)
}

// optional string proposer_address = 2;
void MessageChannelProposer::clear_proposer_address() {
  proposer_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelProposer::proposer_address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelProposer.proposer_address)
  return proposer_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelProposer::set_proposer_address(const ::std::string& value) {
  
  proposer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelProposer.proposer_address)
}
 void MessageChannelProposer::set_proposer_address(const char* value) {
  
  proposer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelProposer.proposer_address)
}
 void MessageChannelProposer::set_proposer_address(const char* value, size_t size) {
  
  proposer_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelProposer.proposer_address)
}
 ::std::string* MessageChannelProposer::mutable_proposer_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelProposer.proposer_address)
  return proposer_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelProposer::release_proposer_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelProposer.proposer_address)
  
  return proposer_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelProposer::set_allocated_proposer_address(::std::string* proposer_address) {
  if (proposer_address != NULL) {
    
  } else {
    
  }
  proposer_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposer_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelProposer.proposer_address)
}

// optional bytes proposer_signature = 3;
void MessageChannelProposer::clear_proposer_signature() {
  proposer_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelProposer::proposer_signature() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelProposer.proposer_signature)
  return proposer_signature_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelProposer::set_proposer_signature(const ::std::string& value) {
  
  proposer_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelProposer.proposer_signature)
}
 void MessageChannelProposer::set_proposer_signature(const char* value) {
  
  proposer_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelProposer.proposer_signature)
}
 void MessageChannelProposer::set_proposer_signature(const void* value, size_t size) {
  
  proposer_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelProposer.proposer_signature)
}
 ::std::string* MessageChannelProposer::mutable_proposer_signature() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelProposer.proposer_signature)
  return proposer_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelProposer::release_proposer_signature() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelProposer.proposer_signature)
  
  return proposer_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelProposer::set_allocated_proposer_signature(::std::string* proposer_signature) {
  if (proposer_signature != NULL) {
    
  } else {
    
  }
  proposer_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proposer_signature);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelProposer.proposer_signature)
}

// optional bytes header_hash = 4;
void MessageChannelProposer::clear_header_hash() {
  header_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelProposer::header_hash() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelProposer.header_hash)
  return header_hash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelProposer::set_header_hash(const ::std::string& value) {
  
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelProposer.header_hash)
}
 void MessageChannelProposer::set_header_hash(const char* value) {
  
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelProposer.header_hash)
}
 void MessageChannelProposer::set_header_hash(const void* value, size_t size) {
  
  header_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelProposer.header_hash)
}
 ::std::string* MessageChannelProposer::mutable_header_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelProposer.header_hash)
  return header_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelProposer::release_header_hash() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelProposer.header_hash)
  
  return header_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelProposer::set_allocated_header_hash(::std::string* header_hash) {
  if (header_hash != NULL) {
    
  } else {
    
  }
  header_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), header_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelProposer.header_hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockReward::kAmountFieldNumber;
const int BlockReward::kPeriodFieldNumber;
const int BlockReward::kRatioFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockReward::BlockReward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.BlockReward)
}

void BlockReward::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BlockReward::BlockReward(const BlockReward& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.BlockReward)
}

void BlockReward::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  amount_ = GOOGLE_LONGLONG(0);
  period_ = GOOGLE_LONGLONG(0);
  ratio_ = 0;
}

BlockReward::~BlockReward() {
  // @@protoc_insertion_point(destructor:protocol.BlockReward)
  SharedDtor();
}

void BlockReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockReward_descriptor_;
}

const BlockReward& BlockReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

BlockReward* BlockReward::default_instance_ = NULL;

BlockReward* BlockReward::New(::google::protobuf::Arena* arena) const {
  BlockReward* n = new BlockReward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockReward::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockReward)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BlockReward, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BlockReward*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(amount_, ratio_);

#undef ZR_HELPER_
#undef ZR_

}

bool BlockReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.BlockReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 amount = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }

      // optional int64 period = 2;
      case 2: {
        if (tag == 16) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &period_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_ratio;
        break;
      }

      // optional double ratio = 3;
      case 3: {
        if (tag == 25) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ratio_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.BlockReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.BlockReward)
  return false;
#undef DO_
}

void BlockReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.BlockReward)
  // optional int64 amount = 1;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->amount(), output);
  }

  // optional int64 period = 2;
  if (this->period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->period(), output);
  }

  // optional double ratio = 3;
  if (this->ratio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ratio(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.BlockReward)
}

::google::protobuf::uint8* BlockReward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockReward)
  // optional int64 amount = 1;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->amount(), target);
  }

  // optional int64 period = 2;
  if (this->period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->period(), target);
  }

  // optional double ratio = 3;
  if (this->ratio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ratio(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockReward)
  return target;
}

int BlockReward::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockReward)
  int total_size = 0;

  // optional int64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  // optional int64 period = 2;
  if (this->period() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->period());
  }

  // optional double ratio = 3;
  if (this->ratio() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockReward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.BlockReward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BlockReward* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockReward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.BlockReward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.BlockReward)
    MergeFrom(*source);
  }
}

void BlockReward::MergeFrom(const BlockReward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockReward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
  if (from.ratio() != 0) {
    set_ratio(from.ratio());
  }
}

void BlockReward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.BlockReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockReward::CopyFrom(const BlockReward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockReward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockReward::IsInitialized() const {

  return true;
}

void BlockReward::Swap(BlockReward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockReward::InternalSwap(BlockReward* other) {
  std::swap(amount_, other->amount_);
  std::swap(period_, other->period_);
  std::swap(ratio_, other->ratio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlockReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockReward_descriptor_;
  metadata.reflection = BlockReward_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockReward

// optional int64 amount = 1;
void BlockReward::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BlockReward::amount() const {
  // @@protoc_insertion_point(field_get:protocol.BlockReward.amount)
  return amount_;
}
 void BlockReward::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.BlockReward.amount)
}

// optional int64 period = 2;
void BlockReward::clear_period() {
  period_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BlockReward::period() const {
  // @@protoc_insertion_point(field_get:protocol.BlockReward.period)
  return period_;
}
 void BlockReward::set_period(::google::protobuf::int64 value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:protocol.BlockReward.period)
}

// optional double ratio = 3;
void BlockReward::clear_ratio() {
  ratio_ = 0;
}
 double BlockReward::ratio() const {
  // @@protoc_insertion_point(field_get:protocol.BlockReward.ratio)
  return ratio_;
}
 void BlockReward::set_ratio(double value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:protocol.BlockReward.ratio)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageChannelCreateChildChain::kGenesisAccountFieldNumber;
const int MessageChannelCreateChildChain::kSloganFieldNumber;
const int MessageChannelCreateChildChain::kFeeFieldNumber;
const int MessageChannelCreateChildChain::kReserveValidatorFieldNumber;
const int MessageChannelCreateChildChain::kChainNameFieldNumber;
const int MessageChannelCreateChildChain::kChainIdFieldNumber;
const int MessageChannelCreateChildChain::kGenesisTokenAmountFieldNumber;
const int MessageChannelCreateChildChain::kBlockRewardFieldNumber;
const int MessageChannelCreateChildChain::kCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageChannelCreateChildChain::MessageChannelCreateChildChain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MessageChannelCreateChildChain)
}

void MessageChannelCreateChildChain::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  fee_ = const_cast< ::protocol::FeeConfig*>(&::protocol::FeeConfig::default_instance());
  block_reward_ = const_cast< ::protocol::BlockReward*>(&::protocol::BlockReward::default_instance());
}

MessageChannelCreateChildChain::MessageChannelCreateChildChain(const MessageChannelCreateChildChain& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.MessageChannelCreateChildChain)
}

void MessageChannelCreateChildChain::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  genesis_account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slogan_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fee_ = NULL;
  chain_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_ = GOOGLE_LONGLONG(0);
  genesis_token_amount_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_reward_ = NULL;
  cost_ = GOOGLE_LONGLONG(0);
}

MessageChannelCreateChildChain::~MessageChannelCreateChildChain() {
  // @@protoc_insertion_point(destructor:protocol.MessageChannelCreateChildChain)
  SharedDtor();
}

void MessageChannelCreateChildChain::SharedDtor() {
  genesis_account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slogan_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  genesis_token_amount_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete fee_;
    delete block_reward_;
  }
}

void MessageChannelCreateChildChain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageChannelCreateChildChain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageChannelCreateChildChain_descriptor_;
}

const MessageChannelCreateChildChain& MessageChannelCreateChildChain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

MessageChannelCreateChildChain* MessageChannelCreateChildChain::default_instance_ = NULL;

MessageChannelCreateChildChain* MessageChannelCreateChildChain::New(::google::protobuf::Arena* arena) const {
  MessageChannelCreateChildChain* n = new MessageChannelCreateChildChain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageChannelCreateChildChain::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MessageChannelCreateChildChain)
  genesis_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slogan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
  chain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chain_id_ = GOOGLE_LONGLONG(0);
  genesis_token_amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && block_reward_ != NULL) delete block_reward_;
  block_reward_ = NULL;
  cost_ = GOOGLE_LONGLONG(0);
  reserve_validator_.Clear();
}

bool MessageChannelCreateChildChain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MessageChannelCreateChildChain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string genesis_account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genesis_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->genesis_account().data(), this->genesis_account().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.MessageChannelCreateChildChain.genesis_account"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_slogan;
        break;
      }

      // optional string slogan = 2;
      case 2: {
        if (tag == 18) {
         parse_slogan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slogan()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->slogan().data(), this->slogan().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.MessageChannelCreateChildChain.slogan"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fee;
        break;
      }

      // optional .protocol.FeeConfig fee = 3;
      case 3: {
        if (tag == 26) {
         parse_fee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fee()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reserve_validator;
        break;
      }

      // repeated string reserve_validator = 4;
      case 4: {
        if (tag == 34) {
         parse_reserve_validator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reserve_validator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reserve_validator(this->reserve_validator_size() - 1).data(),
            this->reserve_validator(this->reserve_validator_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.MessageChannelCreateChildChain.reserve_validator"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reserve_validator;
        if (input->ExpectTag(42)) goto parse_chain_name;
        break;
      }

      // optional string chain_name = 5;
      case 5: {
        if (tag == 42) {
         parse_chain_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chain_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->chain_name().data(), this->chain_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.MessageChannelCreateChildChain.chain_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_chain_id;
        break;
      }

      // optional int64 chain_id = 6;
      case 6: {
        if (tag == 48) {
         parse_chain_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chain_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_genesis_token_amount;
        break;
      }

      // optional string genesis_token_amount = 7;
      case 7: {
        if (tag == 58) {
         parse_genesis_token_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_genesis_token_amount()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->genesis_token_amount().data(), this->genesis_token_amount().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.MessageChannelCreateChildChain.genesis_token_amount"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_block_reward;
        break;
      }

      // optional .protocol.BlockReward block_reward = 8;
      case 8: {
        if (tag == 66) {
         parse_block_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cost;
        break;
      }

      // optional int64 cost = 9;
      case 9: {
        if (tag == 72) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cost_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MessageChannelCreateChildChain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MessageChannelCreateChildChain)
  return false;
#undef DO_
}

void MessageChannelCreateChildChain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MessageChannelCreateChildChain)
  // optional string genesis_account = 1;
  if (this->genesis_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->genesis_account().data(), this->genesis_account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelCreateChildChain.genesis_account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->genesis_account(), output);
  }

  // optional string slogan = 2;
  if (this->slogan().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slogan().data(), this->slogan().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelCreateChildChain.slogan");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->slogan(), output);
  }

  // optional .protocol.FeeConfig fee = 3;
  if (this->has_fee()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->fee_, output);
  }

  // repeated string reserve_validator = 4;
  for (int i = 0; i < this->reserve_validator_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reserve_validator(i).data(), this->reserve_validator(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelCreateChildChain.reserve_validator");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reserve_validator(i), output);
  }

  // optional string chain_name = 5;
  if (this->chain_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_name().data(), this->chain_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelCreateChildChain.chain_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->chain_name(), output);
  }

  // optional int64 chain_id = 6;
  if (this->chain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->chain_id(), output);
  }

  // optional string genesis_token_amount = 7;
  if (this->genesis_token_amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->genesis_token_amount().data(), this->genesis_token_amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelCreateChildChain.genesis_token_amount");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->genesis_token_amount(), output);
  }

  // optional .protocol.BlockReward block_reward = 8;
  if (this->has_block_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->block_reward_, output);
  }

  // optional int64 cost = 9;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->cost(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.MessageChannelCreateChildChain)
}

::google::protobuf::uint8* MessageChannelCreateChildChain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MessageChannelCreateChildChain)
  // optional string genesis_account = 1;
  if (this->genesis_account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->genesis_account().data(), this->genesis_account().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelCreateChildChain.genesis_account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->genesis_account(), target);
  }

  // optional string slogan = 2;
  if (this->slogan().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slogan().data(), this->slogan().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelCreateChildChain.slogan");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->slogan(), target);
  }

  // optional .protocol.FeeConfig fee = 3;
  if (this->has_fee()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->fee_, false, target);
  }

  // repeated string reserve_validator = 4;
  for (int i = 0; i < this->reserve_validator_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reserve_validator(i).data(), this->reserve_validator(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelCreateChildChain.reserve_validator");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->reserve_validator(i), target);
  }

  // optional string chain_name = 5;
  if (this->chain_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->chain_name().data(), this->chain_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelCreateChildChain.chain_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->chain_name(), target);
  }

  // optional int64 chain_id = 6;
  if (this->chain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->chain_id(), target);
  }

  // optional string genesis_token_amount = 7;
  if (this->genesis_token_amount().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->genesis_token_amount().data(), this->genesis_token_amount().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelCreateChildChain.genesis_token_amount");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->genesis_token_amount(), target);
  }

  // optional .protocol.BlockReward block_reward = 8;
  if (this->has_block_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->block_reward_, false, target);
  }

  // optional int64 cost = 9;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->cost(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.MessageChannelCreateChildChain)
  return target;
}

int MessageChannelCreateChildChain::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MessageChannelCreateChildChain)
  int total_size = 0;

  // optional string genesis_account = 1;
  if (this->genesis_account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->genesis_account());
  }

  // optional string slogan = 2;
  if (this->slogan().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slogan());
  }

  // optional .protocol.FeeConfig fee = 3;
  if (this->has_fee()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fee_);
  }

  // optional string chain_name = 5;
  if (this->chain_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->chain_name());
  }

  // optional int64 chain_id = 6;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chain_id());
  }

  // optional string genesis_token_amount = 7;
  if (this->genesis_token_amount().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->genesis_token_amount());
  }

  // optional .protocol.BlockReward block_reward = 8;
  if (this->has_block_reward()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->block_reward_);
  }

  // optional int64 cost = 9;
  if (this->cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cost());
  }

  // repeated string reserve_validator = 4;
  total_size += 1 * this->reserve_validator_size();
  for (int i = 0; i < this->reserve_validator_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reserve_validator(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageChannelCreateChildChain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MessageChannelCreateChildChain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageChannelCreateChildChain* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageChannelCreateChildChain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MessageChannelCreateChildChain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MessageChannelCreateChildChain)
    MergeFrom(*source);
  }
}

void MessageChannelCreateChildChain::MergeFrom(const MessageChannelCreateChildChain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MessageChannelCreateChildChain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  reserve_validator_.MergeFrom(from.reserve_validator_);
  if (from.genesis_account().size() > 0) {

    genesis_account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genesis_account_);
  }
  if (from.slogan().size() > 0) {

    slogan_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slogan_);
  }
  if (from.has_fee()) {
    mutable_fee()->::protocol::FeeConfig::MergeFrom(from.fee());
  }
  if (from.chain_name().size() > 0) {

    chain_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chain_name_);
  }
  if (from.chain_id() != 0) {
    set_chain_id(from.chain_id());
  }
  if (from.genesis_token_amount().size() > 0) {

    genesis_token_amount_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.genesis_token_amount_);
  }
  if (from.has_block_reward()) {
    mutable_block_reward()->::protocol::BlockReward::MergeFrom(from.block_reward());
  }
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
}

void MessageChannelCreateChildChain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MessageChannelCreateChildChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageChannelCreateChildChain::CopyFrom(const MessageChannelCreateChildChain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MessageChannelCreateChildChain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageChannelCreateChildChain::IsInitialized() const {

  return true;
}

void MessageChannelCreateChildChain::Swap(MessageChannelCreateChildChain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageChannelCreateChildChain::InternalSwap(MessageChannelCreateChildChain* other) {
  genesis_account_.Swap(&other->genesis_account_);
  slogan_.Swap(&other->slogan_);
  std::swap(fee_, other->fee_);
  reserve_validator_.UnsafeArenaSwap(&other->reserve_validator_);
  chain_name_.Swap(&other->chain_name_);
  std::swap(chain_id_, other->chain_id_);
  genesis_token_amount_.Swap(&other->genesis_token_amount_);
  std::swap(block_reward_, other->block_reward_);
  std::swap(cost_, other->cost_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageChannelCreateChildChain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageChannelCreateChildChain_descriptor_;
  metadata.reflection = MessageChannelCreateChildChain_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageChannelCreateChildChain

// optional string genesis_account = 1;
void MessageChannelCreateChildChain::clear_genesis_account() {
  genesis_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelCreateChildChain::genesis_account() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.genesis_account)
  return genesis_account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelCreateChildChain::set_genesis_account(const ::std::string& value) {
  
  genesis_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.genesis_account)
}
 void MessageChannelCreateChildChain::set_genesis_account(const char* value) {
  
  genesis_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelCreateChildChain.genesis_account)
}
 void MessageChannelCreateChildChain::set_genesis_account(const char* value, size_t size) {
  
  genesis_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelCreateChildChain.genesis_account)
}
 ::std::string* MessageChannelCreateChildChain::mutable_genesis_account() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.genesis_account)
  return genesis_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelCreateChildChain::release_genesis_account() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelCreateChildChain.genesis_account)
  
  return genesis_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelCreateChildChain::set_allocated_genesis_account(::std::string* genesis_account) {
  if (genesis_account != NULL) {
    
  } else {
    
  }
  genesis_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genesis_account);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelCreateChildChain.genesis_account)
}

// optional string slogan = 2;
void MessageChannelCreateChildChain::clear_slogan() {
  slogan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelCreateChildChain::slogan() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.slogan)
  return slogan_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelCreateChildChain::set_slogan(const ::std::string& value) {
  
  slogan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.slogan)
}
 void MessageChannelCreateChildChain::set_slogan(const char* value) {
  
  slogan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelCreateChildChain.slogan)
}
 void MessageChannelCreateChildChain::set_slogan(const char* value, size_t size) {
  
  slogan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelCreateChildChain.slogan)
}
 ::std::string* MessageChannelCreateChildChain::mutable_slogan() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.slogan)
  return slogan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelCreateChildChain::release_slogan() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelCreateChildChain.slogan)
  
  return slogan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelCreateChildChain::set_allocated_slogan(::std::string* slogan) {
  if (slogan != NULL) {
    
  } else {
    
  }
  slogan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slogan);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelCreateChildChain.slogan)
}

// optional .protocol.FeeConfig fee = 3;
bool MessageChannelCreateChildChain::has_fee() const {
  return !_is_default_instance_ && fee_ != NULL;
}
void MessageChannelCreateChildChain::clear_fee() {
  if (GetArenaNoVirtual() == NULL && fee_ != NULL) delete fee_;
  fee_ = NULL;
}
const ::protocol::FeeConfig& MessageChannelCreateChildChain::fee() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.fee)
  return fee_ != NULL ? *fee_ : *default_instance_->fee_;
}
::protocol::FeeConfig* MessageChannelCreateChildChain::mutable_fee() {
  
  if (fee_ == NULL) {
    fee_ = new ::protocol::FeeConfig;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.fee)
  return fee_;
}
::protocol::FeeConfig* MessageChannelCreateChildChain::release_fee() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelCreateChildChain.fee)
  
  ::protocol::FeeConfig* temp = fee_;
  fee_ = NULL;
  return temp;
}
void MessageChannelCreateChildChain::set_allocated_fee(::protocol::FeeConfig* fee) {
  delete fee_;
  fee_ = fee;
  if (fee) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelCreateChildChain.fee)
}

// repeated string reserve_validator = 4;
int MessageChannelCreateChildChain::reserve_validator_size() const {
  return reserve_validator_.size();
}
void MessageChannelCreateChildChain::clear_reserve_validator() {
  reserve_validator_.Clear();
}
 const ::std::string& MessageChannelCreateChildChain::reserve_validator(int index) const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.reserve_validator)
  return reserve_validator_.Get(index);
}
 ::std::string* MessageChannelCreateChildChain::mutable_reserve_validator(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.reserve_validator)
  return reserve_validator_.Mutable(index);
}
 void MessageChannelCreateChildChain::set_reserve_validator(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.reserve_validator)
  reserve_validator_.Mutable(index)->assign(value);
}
 void MessageChannelCreateChildChain::set_reserve_validator(int index, const char* value) {
  reserve_validator_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelCreateChildChain.reserve_validator)
}
 void MessageChannelCreateChildChain::set_reserve_validator(int index, const char* value, size_t size) {
  reserve_validator_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelCreateChildChain.reserve_validator)
}
 ::std::string* MessageChannelCreateChildChain::add_reserve_validator() {
  // @@protoc_insertion_point(field_add_mutable:protocol.MessageChannelCreateChildChain.reserve_validator)
  return reserve_validator_.Add();
}
 void MessageChannelCreateChildChain::add_reserve_validator(const ::std::string& value) {
  reserve_validator_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.MessageChannelCreateChildChain.reserve_validator)
}
 void MessageChannelCreateChildChain::add_reserve_validator(const char* value) {
  reserve_validator_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.MessageChannelCreateChildChain.reserve_validator)
}
 void MessageChannelCreateChildChain::add_reserve_validator(const char* value, size_t size) {
  reserve_validator_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.MessageChannelCreateChildChain.reserve_validator)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageChannelCreateChildChain::reserve_validator() const {
  // @@protoc_insertion_point(field_list:protocol.MessageChannelCreateChildChain.reserve_validator)
  return reserve_validator_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MessageChannelCreateChildChain::mutable_reserve_validator() {
  // @@protoc_insertion_point(field_mutable_list:protocol.MessageChannelCreateChildChain.reserve_validator)
  return &reserve_validator_;
}

// optional string chain_name = 5;
void MessageChannelCreateChildChain::clear_chain_name() {
  chain_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelCreateChildChain::chain_name() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.chain_name)
  return chain_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelCreateChildChain::set_chain_name(const ::std::string& value) {
  
  chain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.chain_name)
}
 void MessageChannelCreateChildChain::set_chain_name(const char* value) {
  
  chain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelCreateChildChain.chain_name)
}
 void MessageChannelCreateChildChain::set_chain_name(const char* value, size_t size) {
  
  chain_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelCreateChildChain.chain_name)
}
 ::std::string* MessageChannelCreateChildChain::mutable_chain_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.chain_name)
  return chain_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelCreateChildChain::release_chain_name() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelCreateChildChain.chain_name)
  
  return chain_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelCreateChildChain::set_allocated_chain_name(::std::string* chain_name) {
  if (chain_name != NULL) {
    
  } else {
    
  }
  chain_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chain_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelCreateChildChain.chain_name)
}

// optional int64 chain_id = 6;
void MessageChannelCreateChildChain::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannelCreateChildChain::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.chain_id)
  return chain_id_;
}
 void MessageChannelCreateChildChain::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.chain_id)
}

// optional string genesis_token_amount = 7;
void MessageChannelCreateChildChain::clear_genesis_token_amount() {
  genesis_token_amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelCreateChildChain::genesis_token_amount() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.genesis_token_amount)
  return genesis_token_amount_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelCreateChildChain::set_genesis_token_amount(const ::std::string& value) {
  
  genesis_token_amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.genesis_token_amount)
}
 void MessageChannelCreateChildChain::set_genesis_token_amount(const char* value) {
  
  genesis_token_amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelCreateChildChain.genesis_token_amount)
}
 void MessageChannelCreateChildChain::set_genesis_token_amount(const char* value, size_t size) {
  
  genesis_token_amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelCreateChildChain.genesis_token_amount)
}
 ::std::string* MessageChannelCreateChildChain::mutable_genesis_token_amount() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.genesis_token_amount)
  return genesis_token_amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelCreateChildChain::release_genesis_token_amount() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelCreateChildChain.genesis_token_amount)
  
  return genesis_token_amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelCreateChildChain::set_allocated_genesis_token_amount(::std::string* genesis_token_amount) {
  if (genesis_token_amount != NULL) {
    
  } else {
    
  }
  genesis_token_amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), genesis_token_amount);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelCreateChildChain.genesis_token_amount)
}

// optional .protocol.BlockReward block_reward = 8;
bool MessageChannelCreateChildChain::has_block_reward() const {
  return !_is_default_instance_ && block_reward_ != NULL;
}
void MessageChannelCreateChildChain::clear_block_reward() {
  if (GetArenaNoVirtual() == NULL && block_reward_ != NULL) delete block_reward_;
  block_reward_ = NULL;
}
const ::protocol::BlockReward& MessageChannelCreateChildChain::block_reward() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.block_reward)
  return block_reward_ != NULL ? *block_reward_ : *default_instance_->block_reward_;
}
::protocol::BlockReward* MessageChannelCreateChildChain::mutable_block_reward() {
  
  if (block_reward_ == NULL) {
    block_reward_ = new ::protocol::BlockReward;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelCreateChildChain.block_reward)
  return block_reward_;
}
::protocol::BlockReward* MessageChannelCreateChildChain::release_block_reward() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelCreateChildChain.block_reward)
  
  ::protocol::BlockReward* temp = block_reward_;
  block_reward_ = NULL;
  return temp;
}
void MessageChannelCreateChildChain::set_allocated_block_reward(::protocol::BlockReward* block_reward) {
  delete block_reward_;
  block_reward_ = block_reward;
  if (block_reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelCreateChildChain.block_reward)
}

// optional int64 cost = 9;
void MessageChannelCreateChildChain::clear_cost() {
  cost_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannelCreateChildChain::cost() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelCreateChildChain.cost)
  return cost_;
}
 void MessageChannelCreateChildChain::set_cost(::google::protobuf::int64 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelCreateChildChain.cost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageChannelChildGenesesRequest::kChainIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageChannelChildGenesesRequest::MessageChannelChildGenesesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MessageChannelChildGenesesRequest)
}

void MessageChannelChildGenesesRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessageChannelChildGenesesRequest::MessageChannelChildGenesesRequest(const MessageChannelChildGenesesRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.MessageChannelChildGenesesRequest)
}

void MessageChannelChildGenesesRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  chain_id_ = GOOGLE_LONGLONG(0);
}

MessageChannelChildGenesesRequest::~MessageChannelChildGenesesRequest() {
  // @@protoc_insertion_point(destructor:protocol.MessageChannelChildGenesesRequest)
  SharedDtor();
}

void MessageChannelChildGenesesRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageChannelChildGenesesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageChannelChildGenesesRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageChannelChildGenesesRequest_descriptor_;
}

const MessageChannelChildGenesesRequest& MessageChannelChildGenesesRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

MessageChannelChildGenesesRequest* MessageChannelChildGenesesRequest::default_instance_ = NULL;

MessageChannelChildGenesesRequest* MessageChannelChildGenesesRequest::New(::google::protobuf::Arena* arena) const {
  MessageChannelChildGenesesRequest* n = new MessageChannelChildGenesesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageChannelChildGenesesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MessageChannelChildGenesesRequest)
  chain_id_ = GOOGLE_LONGLONG(0);
}

bool MessageChannelChildGenesesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MessageChannelChildGenesesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 chain_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chain_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MessageChannelChildGenesesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MessageChannelChildGenesesRequest)
  return false;
#undef DO_
}

void MessageChannelChildGenesesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MessageChannelChildGenesesRequest)
  // optional int64 chain_id = 1;
  if (this->chain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->chain_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.MessageChannelChildGenesesRequest)
}

::google::protobuf::uint8* MessageChannelChildGenesesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MessageChannelChildGenesesRequest)
  // optional int64 chain_id = 1;
  if (this->chain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->chain_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.MessageChannelChildGenesesRequest)
  return target;
}

int MessageChannelChildGenesesRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MessageChannelChildGenesesRequest)
  int total_size = 0;

  // optional int64 chain_id = 1;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chain_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageChannelChildGenesesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MessageChannelChildGenesesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageChannelChildGenesesRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageChannelChildGenesesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MessageChannelChildGenesesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MessageChannelChildGenesesRequest)
    MergeFrom(*source);
  }
}

void MessageChannelChildGenesesRequest::MergeFrom(const MessageChannelChildGenesesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MessageChannelChildGenesesRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.chain_id() != 0) {
    set_chain_id(from.chain_id());
  }
}

void MessageChannelChildGenesesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MessageChannelChildGenesesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageChannelChildGenesesRequest::CopyFrom(const MessageChannelChildGenesesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MessageChannelChildGenesesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageChannelChildGenesesRequest::IsInitialized() const {

  return true;
}

void MessageChannelChildGenesesRequest::Swap(MessageChannelChildGenesesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageChannelChildGenesesRequest::InternalSwap(MessageChannelChildGenesesRequest* other) {
  std::swap(chain_id_, other->chain_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageChannelChildGenesesRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageChannelChildGenesesRequest_descriptor_;
  metadata.reflection = MessageChannelChildGenesesRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageChannelChildGenesesRequest

// optional int64 chain_id = 1;
void MessageChannelChildGenesesRequest::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannelChildGenesesRequest::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChildGenesesRequest.chain_id)
  return chain_id_;
}
 void MessageChannelChildGenesesRequest::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelChildGenesesRequest.chain_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageChannelChildGenesesResponse::kErrorCodeFieldNumber;
const int MessageChannelChildGenesesResponse::kErrorDescFieldNumber;
const int MessageChannelChildGenesesResponse::kCreateChildChainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageChannelChildGenesesResponse::MessageChannelChildGenesesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MessageChannelChildGenesesResponse)
}

void MessageChannelChildGenesesResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  create_child_chain_ = const_cast< ::protocol::MessageChannelCreateChildChain*>(&::protocol::MessageChannelCreateChildChain::default_instance());
}

MessageChannelChildGenesesResponse::MessageChannelChildGenesesResponse(const MessageChannelChildGenesesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.MessageChannelChildGenesesResponse)
}

void MessageChannelChildGenesesResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  error_desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  create_child_chain_ = NULL;
}

MessageChannelChildGenesesResponse::~MessageChannelChildGenesesResponse() {
  // @@protoc_insertion_point(destructor:protocol.MessageChannelChildGenesesResponse)
  SharedDtor();
}

void MessageChannelChildGenesesResponse::SharedDtor() {
  error_desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete create_child_chain_;
  }
}

void MessageChannelChildGenesesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageChannelChildGenesesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageChannelChildGenesesResponse_descriptor_;
}

const MessageChannelChildGenesesResponse& MessageChannelChildGenesesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

MessageChannelChildGenesesResponse* MessageChannelChildGenesesResponse::default_instance_ = NULL;

MessageChannelChildGenesesResponse* MessageChannelChildGenesesResponse::New(::google::protobuf::Arena* arena) const {
  MessageChannelChildGenesesResponse* n = new MessageChannelChildGenesesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageChannelChildGenesesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MessageChannelChildGenesesResponse)
  error_code_ = 0;
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && create_child_chain_ != NULL) delete create_child_chain_;
  create_child_chain_ = NULL;
}

bool MessageChannelChildGenesesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MessageChannelChildGenesesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocol.ERRORCODE error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::protocol::ERRORCODE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_desc;
        break;
      }

      // optional string error_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_error_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_desc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_desc().data(), this->error_desc().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.MessageChannelChildGenesesResponse.error_desc"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_create_child_chain;
        break;
      }

      // optional .protocol.MessageChannelCreateChildChain create_child_chain = 3;
      case 3: {
        if (tag == 26) {
         parse_create_child_chain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_child_chain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MessageChannelChildGenesesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MessageChannelChildGenesesResponse)
  return false;
#undef DO_
}

void MessageChannelChildGenesesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MessageChannelChildGenesesResponse)
  // optional .protocol.ERRORCODE error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelChildGenesesResponse.error_desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_desc(), output);
  }

  // optional .protocol.MessageChannelCreateChildChain create_child_chain = 3;
  if (this->has_create_child_chain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->create_child_chain_, output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.MessageChannelChildGenesesResponse)
}

::google::protobuf::uint8* MessageChannelChildGenesesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MessageChannelChildGenesesResponse)
  // optional .protocol.ERRORCODE error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_desc().data(), this->error_desc().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelChildGenesesResponse.error_desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_desc(), target);
  }

  // optional .protocol.MessageChannelCreateChildChain create_child_chain = 3;
  if (this->has_create_child_chain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->create_child_chain_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.MessageChannelChildGenesesResponse)
  return target;
}

int MessageChannelChildGenesesResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MessageChannelChildGenesesResponse)
  int total_size = 0;

  // optional .protocol.ERRORCODE error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  // optional string error_desc = 2;
  if (this->error_desc().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_desc());
  }

  // optional .protocol.MessageChannelCreateChildChain create_child_chain = 3;
  if (this->has_create_child_chain()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_child_chain_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageChannelChildGenesesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MessageChannelChildGenesesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageChannelChildGenesesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageChannelChildGenesesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MessageChannelChildGenesesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MessageChannelChildGenesesResponse)
    MergeFrom(*source);
  }
}

void MessageChannelChildGenesesResponse::MergeFrom(const MessageChannelChildGenesesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MessageChannelChildGenesesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  if (from.error_desc().size() > 0) {

    error_desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_desc_);
  }
  if (from.has_create_child_chain()) {
    mutable_create_child_chain()->::protocol::MessageChannelCreateChildChain::MergeFrom(from.create_child_chain());
  }
}

void MessageChannelChildGenesesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MessageChannelChildGenesesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageChannelChildGenesesResponse::CopyFrom(const MessageChannelChildGenesesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MessageChannelChildGenesesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageChannelChildGenesesResponse::IsInitialized() const {

  return true;
}

void MessageChannelChildGenesesResponse::Swap(MessageChannelChildGenesesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageChannelChildGenesesResponse::InternalSwap(MessageChannelChildGenesesResponse* other) {
  std::swap(error_code_, other->error_code_);
  error_desc_.Swap(&other->error_desc_);
  std::swap(create_child_chain_, other->create_child_chain_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageChannelChildGenesesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageChannelChildGenesesResponse_descriptor_;
  metadata.reflection = MessageChannelChildGenesesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageChannelChildGenesesResponse

// optional .protocol.ERRORCODE error_code = 1;
void MessageChannelChildGenesesResponse::clear_error_code() {
  error_code_ = 0;
}
 ::protocol::ERRORCODE MessageChannelChildGenesesResponse::error_code() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChildGenesesResponse.error_code)
  return static_cast< ::protocol::ERRORCODE >(error_code_);
}
 void MessageChannelChildGenesesResponse::set_error_code(::protocol::ERRORCODE value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelChildGenesesResponse.error_code)
}

// optional string error_desc = 2;
void MessageChannelChildGenesesResponse::clear_error_desc() {
  error_desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelChildGenesesResponse::error_desc() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChildGenesesResponse.error_desc)
  return error_desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelChildGenesesResponse::set_error_desc(const ::std::string& value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelChildGenesesResponse.error_desc)
}
 void MessageChannelChildGenesesResponse::set_error_desc(const char* value) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelChildGenesesResponse.error_desc)
}
 void MessageChannelChildGenesesResponse::set_error_desc(const char* value, size_t size) {
  
  error_desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelChildGenesesResponse.error_desc)
}
 ::std::string* MessageChannelChildGenesesResponse::mutable_error_desc() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelChildGenesesResponse.error_desc)
  return error_desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelChildGenesesResponse::release_error_desc() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelChildGenesesResponse.error_desc)
  
  return error_desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelChildGenesesResponse::set_allocated_error_desc(::std::string* error_desc) {
  if (error_desc != NULL) {
    
  } else {
    
  }
  error_desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_desc);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelChildGenesesResponse.error_desc)
}

// optional .protocol.MessageChannelCreateChildChain create_child_chain = 3;
bool MessageChannelChildGenesesResponse::has_create_child_chain() const {
  return !_is_default_instance_ && create_child_chain_ != NULL;
}
void MessageChannelChildGenesesResponse::clear_create_child_chain() {
  if (GetArenaNoVirtual() == NULL && create_child_chain_ != NULL) delete create_child_chain_;
  create_child_chain_ = NULL;
}
const ::protocol::MessageChannelCreateChildChain& MessageChannelChildGenesesResponse::create_child_chain() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelChildGenesesResponse.create_child_chain)
  return create_child_chain_ != NULL ? *create_child_chain_ : *default_instance_->create_child_chain_;
}
::protocol::MessageChannelCreateChildChain* MessageChannelChildGenesesResponse::mutable_create_child_chain() {
  
  if (create_child_chain_ == NULL) {
    create_child_chain_ = new ::protocol::MessageChannelCreateChildChain;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelChildGenesesResponse.create_child_chain)
  return create_child_chain_;
}
::protocol::MessageChannelCreateChildChain* MessageChannelChildGenesesResponse::release_create_child_chain() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelChildGenesesResponse.create_child_chain)
  
  ::protocol::MessageChannelCreateChildChain* temp = create_child_chain_;
  create_child_chain_ = NULL;
  return temp;
}
void MessageChannelChildGenesesResponse::set_allocated_create_child_chain(::protocol::MessageChannelCreateChildChain* create_child_chain) {
  delete create_child_chain_;
  create_child_chain_ = create_child_chain;
  if (create_child_chain) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelChildGenesesResponse.create_child_chain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageChannelQueryHead::kLedgerSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageChannelQueryHead::MessageChannelQueryHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MessageChannelQueryHead)
}

void MessageChannelQueryHead::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessageChannelQueryHead::MessageChannelQueryHead(const MessageChannelQueryHead& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.MessageChannelQueryHead)
}

void MessageChannelQueryHead::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ledger_seq_ = GOOGLE_LONGLONG(0);
}

MessageChannelQueryHead::~MessageChannelQueryHead() {
  // @@protoc_insertion_point(destructor:protocol.MessageChannelQueryHead)
  SharedDtor();
}

void MessageChannelQueryHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageChannelQueryHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageChannelQueryHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageChannelQueryHead_descriptor_;
}

const MessageChannelQueryHead& MessageChannelQueryHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

MessageChannelQueryHead* MessageChannelQueryHead::default_instance_ = NULL;

MessageChannelQueryHead* MessageChannelQueryHead::New(::google::protobuf::Arena* arena) const {
  MessageChannelQueryHead* n = new MessageChannelQueryHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageChannelQueryHead::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MessageChannelQueryHead)
  ledger_seq_ = GOOGLE_LONGLONG(0);
}

bool MessageChannelQueryHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MessageChannelQueryHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ledger_seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ledger_seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MessageChannelQueryHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MessageChannelQueryHead)
  return false;
#undef DO_
}

void MessageChannelQueryHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MessageChannelQueryHead)
  // optional int64 ledger_seq = 1;
  if (this->ledger_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ledger_seq(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.MessageChannelQueryHead)
}

::google::protobuf::uint8* MessageChannelQueryHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MessageChannelQueryHead)
  // optional int64 ledger_seq = 1;
  if (this->ledger_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ledger_seq(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.MessageChannelQueryHead)
  return target;
}

int MessageChannelQueryHead::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MessageChannelQueryHead)
  int total_size = 0;

  // optional int64 ledger_seq = 1;
  if (this->ledger_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ledger_seq());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageChannelQueryHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MessageChannelQueryHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageChannelQueryHead* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageChannelQueryHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MessageChannelQueryHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MessageChannelQueryHead)
    MergeFrom(*source);
  }
}

void MessageChannelQueryHead::MergeFrom(const MessageChannelQueryHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MessageChannelQueryHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.ledger_seq() != 0) {
    set_ledger_seq(from.ledger_seq());
  }
}

void MessageChannelQueryHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MessageChannelQueryHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageChannelQueryHead::CopyFrom(const MessageChannelQueryHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MessageChannelQueryHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageChannelQueryHead::IsInitialized() const {

  return true;
}

void MessageChannelQueryHead::Swap(MessageChannelQueryHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageChannelQueryHead::InternalSwap(MessageChannelQueryHead* other) {
  std::swap(ledger_seq_, other->ledger_seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageChannelQueryHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageChannelQueryHead_descriptor_;
  metadata.reflection = MessageChannelQueryHead_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageChannelQueryHead

// optional int64 ledger_seq = 1;
void MessageChannelQueryHead::clear_ledger_seq() {
  ledger_seq_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannelQueryHead::ledger_seq() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelQueryHead.ledger_seq)
  return ledger_seq_;
}
 void MessageChannelQueryHead::set_ledger_seq(::google::protobuf::int64 value) {
  
  ledger_seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelQueryHead.ledger_seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MerkelProof::kMerkelRootFieldNumber;
const int MerkelProof::kMerkelPathFieldNumber;
const int MerkelProof::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MerkelProof::MerkelProof()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MerkelProof)
}

void MerkelProof::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  transaction_ = const_cast< ::protocol::Transaction*>(&::protocol::Transaction::default_instance());
}

MerkelProof::MerkelProof(const MerkelProof& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.MerkelProof)
}

void MerkelProof::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  merkel_root_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkel_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_ = NULL;
}

MerkelProof::~MerkelProof() {
  // @@protoc_insertion_point(destructor:protocol.MerkelProof)
  SharedDtor();
}

void MerkelProof::SharedDtor() {
  merkel_root_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkel_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete transaction_;
  }
}

void MerkelProof::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MerkelProof::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MerkelProof_descriptor_;
}

const MerkelProof& MerkelProof::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

MerkelProof* MerkelProof::default_instance_ = NULL;

MerkelProof* MerkelProof::New(::google::protobuf::Arena* arena) const {
  MerkelProof* n = new MerkelProof;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MerkelProof::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MerkelProof)
  merkel_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  merkel_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) delete transaction_;
  transaction_ = NULL;
}

bool MerkelProof::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MerkelProof)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes merkel_root = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merkel_root()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_merkel_path;
        break;
      }

      // optional bytes merkel_path = 2;
      case 2: {
        if (tag == 18) {
         parse_merkel_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_merkel_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_transaction;
        break;
      }

      // optional .protocol.Transaction transaction = 3;
      case 3: {
        if (tag == 26) {
         parse_transaction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MerkelProof)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MerkelProof)
  return false;
#undef DO_
}

void MerkelProof::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MerkelProof)
  // optional bytes merkel_root = 1;
  if (this->merkel_root().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->merkel_root(), output);
  }

  // optional bytes merkel_path = 2;
  if (this->merkel_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->merkel_path(), output);
  }

  // optional .protocol.Transaction transaction = 3;
  if (this->has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->transaction_, output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.MerkelProof)
}

::google::protobuf::uint8* MerkelProof::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MerkelProof)
  // optional bytes merkel_root = 1;
  if (this->merkel_root().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->merkel_root(), target);
  }

  // optional bytes merkel_path = 2;
  if (this->merkel_path().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->merkel_path(), target);
  }

  // optional .protocol.Transaction transaction = 3;
  if (this->has_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->transaction_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.MerkelProof)
  return target;
}

int MerkelProof::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MerkelProof)
  int total_size = 0;

  // optional bytes merkel_root = 1;
  if (this->merkel_root().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->merkel_root());
  }

  // optional bytes merkel_path = 2;
  if (this->merkel_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->merkel_path());
  }

  // optional .protocol.Transaction transaction = 3;
  if (this->has_transaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->transaction_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MerkelProof::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MerkelProof)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MerkelProof* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MerkelProof>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MerkelProof)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MerkelProof)
    MergeFrom(*source);
  }
}

void MerkelProof::MergeFrom(const MerkelProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MerkelProof)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.merkel_root().size() > 0) {

    merkel_root_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkel_root_);
  }
  if (from.merkel_path().size() > 0) {

    merkel_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.merkel_path_);
  }
  if (from.has_transaction()) {
    mutable_transaction()->::protocol::Transaction::MergeFrom(from.transaction());
  }
}

void MerkelProof::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MerkelProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerkelProof::CopyFrom(const MerkelProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MerkelProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerkelProof::IsInitialized() const {

  return true;
}

void MerkelProof::Swap(MerkelProof* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MerkelProof::InternalSwap(MerkelProof* other) {
  merkel_root_.Swap(&other->merkel_root_);
  merkel_path_.Swap(&other->merkel_path_);
  std::swap(transaction_, other->transaction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MerkelProof::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MerkelProof_descriptor_;
  metadata.reflection = MerkelProof_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MerkelProof

// optional bytes merkel_root = 1;
void MerkelProof::clear_merkel_root() {
  merkel_root_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MerkelProof::merkel_root() const {
  // @@protoc_insertion_point(field_get:protocol.MerkelProof.merkel_root)
  return merkel_root_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MerkelProof::set_merkel_root(const ::std::string& value) {
  
  merkel_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MerkelProof.merkel_root)
}
 void MerkelProof::set_merkel_root(const char* value) {
  
  merkel_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MerkelProof.merkel_root)
}
 void MerkelProof::set_merkel_root(const void* value, size_t size) {
  
  merkel_root_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MerkelProof.merkel_root)
}
 ::std::string* MerkelProof::mutable_merkel_root() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MerkelProof.merkel_root)
  return merkel_root_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MerkelProof::release_merkel_root() {
  // @@protoc_insertion_point(field_release:protocol.MerkelProof.merkel_root)
  
  return merkel_root_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MerkelProof::set_allocated_merkel_root(::std::string* merkel_root) {
  if (merkel_root != NULL) {
    
  } else {
    
  }
  merkel_root_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkel_root);
  // @@protoc_insertion_point(field_set_allocated:protocol.MerkelProof.merkel_root)
}

// optional bytes merkel_path = 2;
void MerkelProof::clear_merkel_path() {
  merkel_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MerkelProof::merkel_path() const {
  // @@protoc_insertion_point(field_get:protocol.MerkelProof.merkel_path)
  return merkel_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MerkelProof::set_merkel_path(const ::std::string& value) {
  
  merkel_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MerkelProof.merkel_path)
}
 void MerkelProof::set_merkel_path(const char* value) {
  
  merkel_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MerkelProof.merkel_path)
}
 void MerkelProof::set_merkel_path(const void* value, size_t size) {
  
  merkel_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MerkelProof.merkel_path)
}
 ::std::string* MerkelProof::mutable_merkel_path() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MerkelProof.merkel_path)
  return merkel_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MerkelProof::release_merkel_path() {
  // @@protoc_insertion_point(field_release:protocol.MerkelProof.merkel_path)
  
  return merkel_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MerkelProof::set_allocated_merkel_path(::std::string* merkel_path) {
  if (merkel_path != NULL) {
    
  } else {
    
  }
  merkel_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), merkel_path);
  // @@protoc_insertion_point(field_set_allocated:protocol.MerkelProof.merkel_path)
}

// optional .protocol.Transaction transaction = 3;
bool MerkelProof::has_transaction() const {
  return !_is_default_instance_ && transaction_ != NULL;
}
void MerkelProof::clear_transaction() {
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) delete transaction_;
  transaction_ = NULL;
}
const ::protocol::Transaction& MerkelProof::transaction() const {
  // @@protoc_insertion_point(field_get:protocol.MerkelProof.transaction)
  return transaction_ != NULL ? *transaction_ : *default_instance_->transaction_;
}
::protocol::Transaction* MerkelProof::mutable_transaction() {
  
  if (transaction_ == NULL) {
    transaction_ = new ::protocol::Transaction;
  }
  // @@protoc_insertion_point(field_mutable:protocol.MerkelProof.transaction)
  return transaction_;
}
::protocol::Transaction* MerkelProof::release_transaction() {
  // @@protoc_insertion_point(field_release:protocol.MerkelProof.transaction)
  
  ::protocol::Transaction* temp = transaction_;
  transaction_ = NULL;
  return temp;
}
void MerkelProof::set_allocated_transaction(::protocol::Transaction* transaction) {
  delete transaction_;
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.MerkelProof.transaction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageChannelDeposit::kChainIdFieldNumber;
const int MessageChannelDeposit::kAmountFieldNumber;
const int MessageChannelDeposit::kSeqFieldNumber;
const int MessageChannelDeposit::kBlockNumberFieldNumber;
const int MessageChannelDeposit::kSourceAddressFieldNumber;
const int MessageChannelDeposit::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageChannelDeposit::MessageChannelDeposit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MessageChannelDeposit)
}

void MessageChannelDeposit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MessageChannelDeposit::MessageChannelDeposit(const MessageChannelDeposit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protocol.MessageChannelDeposit)
}

void MessageChannelDeposit::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chain_id_ = GOOGLE_LONGLONG(0);
  amount_ = GOOGLE_LONGLONG(0);
  seq_ = GOOGLE_LONGLONG(0);
  block_number_ = GOOGLE_LONGLONG(0);
  source_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MessageChannelDeposit::~MessageChannelDeposit() {
  // @@protoc_insertion_point(destructor:protocol.MessageChannelDeposit)
  SharedDtor();
}

void MessageChannelDeposit::SharedDtor() {
  source_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MessageChannelDeposit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageChannelDeposit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageChannelDeposit_descriptor_;
}

const MessageChannelDeposit& MessageChannelDeposit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_overlay_2eproto();
  return *default_instance_;
}

MessageChannelDeposit* MessageChannelDeposit::default_instance_ = NULL;

MessageChannelDeposit* MessageChannelDeposit::New(::google::protobuf::Arena* arena) const {
  MessageChannelDeposit* n = new MessageChannelDeposit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageChannelDeposit::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MessageChannelDeposit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MessageChannelDeposit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MessageChannelDeposit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(chain_id_, block_number_);
  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool MessageChannelDeposit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MessageChannelDeposit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 chain_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chain_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int64 amount = 2;
      case 2: {
        if (tag == 16) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &amount_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seq;
        break;
      }

      // optional int64 seq = 3;
      case 3: {
        if (tag == 24) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_block_number;
        break;
      }

      // optional int64 block_number = 4;
      case 4: {
        if (tag == 32) {
         parse_block_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &block_number_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_source_address;
        break;
      }

      // optional string source_address = 5;
      case 5: {
        if (tag == 42) {
         parse_source_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_address().data(), this->source_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.MessageChannelDeposit.source_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_address;
        break;
      }

      // optional string address = 6;
      case 6: {
        if (tag == 50) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "protocol.MessageChannelDeposit.address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MessageChannelDeposit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MessageChannelDeposit)
  return false;
#undef DO_
}

void MessageChannelDeposit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MessageChannelDeposit)
  // optional int64 chain_id = 1;
  if (this->chain_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->chain_id(), output);
  }

  // optional int64 amount = 2;
  if (this->amount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->amount(), output);
  }

  // optional int64 seq = 3;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->seq(), output);
  }

  // optional int64 block_number = 4;
  if (this->block_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->block_number(), output);
  }

  // optional string source_address = 5;
  if (this->source_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_address().data(), this->source_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelDeposit.source_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source_address(), output);
  }

  // optional string address = 6;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelDeposit.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->address(), output);
  }

  // @@protoc_insertion_point(serialize_end:protocol.MessageChannelDeposit)
}

::google::protobuf::uint8* MessageChannelDeposit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MessageChannelDeposit)
  // optional int64 chain_id = 1;
  if (this->chain_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->chain_id(), target);
  }

  // optional int64 amount = 2;
  if (this->amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->amount(), target);
  }

  // optional int64 seq = 3;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->seq(), target);
  }

  // optional int64 block_number = 4;
  if (this->block_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->block_number(), target);
  }

  // optional string source_address = 5;
  if (this->source_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_address().data(), this->source_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelDeposit.source_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source_address(), target);
  }

  // optional string address = 6;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "protocol.MessageChannelDeposit.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->address(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:protocol.MessageChannelDeposit)
  return target;
}

int MessageChannelDeposit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MessageChannelDeposit)
  int total_size = 0;

  // optional int64 chain_id = 1;
  if (this->chain_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chain_id());
  }

  // optional int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->amount());
  }

  // optional int64 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seq());
  }

  // optional int64 block_number = 4;
  if (this->block_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->block_number());
  }

  // optional string source_address = 5;
  if (this->source_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_address());
  }

  // optional string address = 6;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageChannelDeposit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MessageChannelDeposit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MessageChannelDeposit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageChannelDeposit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MessageChannelDeposit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MessageChannelDeposit)
    MergeFrom(*source);
  }
}

void MessageChannelDeposit::MergeFrom(const MessageChannelDeposit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MessageChannelDeposit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.chain_id() != 0) {
    set_chain_id(from.chain_id());
  }
  if (from.amount() != 0) {
    set_amount(from.amount());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.block_number() != 0) {
    set_block_number(from.block_number());
  }
  if (from.source_address().size() > 0) {

    source_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_address_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void MessageChannelDeposit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MessageChannelDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageChannelDeposit::CopyFrom(const MessageChannelDeposit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MessageChannelDeposit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageChannelDeposit::IsInitialized() const {

  return true;
}

void MessageChannelDeposit::Swap(MessageChannelDeposit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageChannelDeposit::InternalSwap(MessageChannelDeposit* other) {
  std::swap(chain_id_, other->chain_id_);
  std::swap(amount_, other->amount_);
  std::swap(seq_, other->seq_);
  std::swap(block_number_, other->block_number_);
  source_address_.Swap(&other->source_address_);
  address_.Swap(&other->address_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageChannelDeposit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageChannelDeposit_descriptor_;
  metadata.reflection = MessageChannelDeposit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageChannelDeposit

// optional int64 chain_id = 1;
void MessageChannelDeposit::clear_chain_id() {
  chain_id_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannelDeposit::chain_id() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelDeposit.chain_id)
  return chain_id_;
}
 void MessageChannelDeposit::set_chain_id(::google::protobuf::int64 value) {
  
  chain_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelDeposit.chain_id)
}

// optional int64 amount = 2;
void MessageChannelDeposit::clear_amount() {
  amount_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannelDeposit::amount() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelDeposit.amount)
  return amount_;
}
 void MessageChannelDeposit::set_amount(::google::protobuf::int64 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelDeposit.amount)
}

// optional int64 seq = 3;
void MessageChannelDeposit::clear_seq() {
  seq_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannelDeposit::seq() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelDeposit.seq)
  return seq_;
}
 void MessageChannelDeposit::set_seq(::google::protobuf::int64 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelDeposit.seq)
}

// optional int64 block_number = 4;
void MessageChannelDeposit::clear_block_number() {
  block_number_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MessageChannelDeposit::block_number() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelDeposit.block_number)
  return block_number_;
}
 void MessageChannelDeposit::set_block_number(::google::protobuf::int64 value) {
  
  block_number_ = value;
  // @@protoc_insertion_point(field_set:protocol.MessageChannelDeposit.block_number)
}

// optional string source_address = 5;
void MessageChannelDeposit::clear_source_address() {
  source_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelDeposit::source_address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelDeposit.source_address)
  return source_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelDeposit::set_source_address(const ::std::string& value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelDeposit.source_address)
}
 void MessageChannelDeposit::set_source_address(const char* value) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelDeposit.source_address)
}
 void MessageChannelDeposit::set_source_address(const char* value, size_t size) {
  
  source_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelDeposit.source_address)
}
 ::std::string* MessageChannelDeposit::mutable_source_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelDeposit.source_address)
  return source_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelDeposit::release_source_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelDeposit.source_address)
  
  return source_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelDeposit::set_allocated_source_address(::std::string* source_address) {
  if (source_address != NULL) {
    
  } else {
    
  }
  source_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelDeposit.source_address)
}

// optional string address = 6;
void MessageChannelDeposit::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MessageChannelDeposit::address() const {
  // @@protoc_insertion_point(field_get:protocol.MessageChannelDeposit.address)
  return address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelDeposit::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.MessageChannelDeposit.address)
}
 void MessageChannelDeposit::set_address(const char* value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.MessageChannelDeposit.address)
}
 void MessageChannelDeposit::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.MessageChannelDeposit.address)
}
 ::std::string* MessageChannelDeposit::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.MessageChannelDeposit.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageChannelDeposit::release_address() {
  // @@protoc_insertion_point(field_release:protocol.MessageChannelDeposit.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageChannelDeposit::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.MessageChannelDeposit.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)
